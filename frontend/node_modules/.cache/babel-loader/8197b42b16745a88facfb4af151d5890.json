{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nvar ResolverError = /*#__PURE__*/function (_Error) {\n  _inherits(ResolverError, _Error);\n\n  var _super = _createSuper(ResolverError);\n\n  function ResolverError(type, errorNode, values) {\n    var _this;\n\n    _classCallCheck(this, ResolverError);\n\n    _this = _super.call(this, \"Internal \".concat(type, \" parse error\"));\n\n    _defineProperty(_assertThisInitialized(_this), \"type\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"errorNode\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"values\", void 0);\n\n    _this.type = type;\n    _this.errorNode = errorNode;\n    _this.values = values;\n    return _this;\n  }\n\n  _createClass(ResolverError, [{\n    key: \"getResolveError\",\n    value: function getResolveError() {\n      return _objectSpread2({\n        type: 'resolve-error',\n        errorType: this.type,\n        errorNode: this.errorNode\n      }, this.values);\n    }\n  }]);\n\n  return ResolverError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar checkArgs = function checkArgs(node, minArgs, maxArgs) {\n  if (node.args.length < minArgs || node.args.length > maxArgs) {\n    throw new ResolverError('functionArgLength', node, {\n      name: node.name,\n      minArgs: minArgs,\n      maxArgs: maxArgs\n    });\n  }\n};\n\nfunction getUnit(x) {\n  if (x.type === 'unit') {\n    return x.units;\n  } else {\n    return {};\n  }\n}\n\nfunction getUnitless(x) {\n  if (x.type === 'unit') {\n    return x.value;\n  } else {\n    return x;\n  }\n}\n\nfunction isSameUnit(a, b) {\n  var keys = Object.keys(a);\n  return keys.length === Object.keys(b).length && keys.every(function (key) {\n    return a[key] === b[key];\n  });\n}\n\nfunction isEmptyUnit(x) {\n  return Object.keys(x).length === 0;\n}\n\nfunction combineUnits(a, b, mapper) {\n  // Get all units from a\n  var result = mapUnit(a, function (value, key) {\n    return mapper(value, b[key] || 0, key);\n  }); // Get remaining units from b\n\n  for (var _i = 0, _Object$entries = Object.entries(b); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n        _key = _Object$entries$_i[0],\n        _value = _Object$entries$_i[1];\n\n    if (_key in a) {\n      continue;\n    }\n\n    var newValue = mapper(0, _value, _key);\n\n    if (newValue !== 0) {\n      result[_key] = newValue;\n    }\n  }\n\n  return result;\n}\n\nfunction mapUnit(x, mapper) {\n  var result = {};\n\n  for (var _i2 = 0, _Object$entries2 = Object.entries(x); _i2 < _Object$entries2.length; _i2++) {\n    var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),\n        _key2 = _Object$entries2$_i[0],\n        _value2 = _Object$entries2$_i[1];\n\n    var newValue = mapper(_value2, _key2);\n\n    if (newValue !== 0) {\n      result[_key2] = newValue;\n    }\n  }\n\n  return result;\n}\n\nvar valueWrap = function valueWrap(x) {\n  return {\n    type: 'number',\n    value: x\n  };\n};\n\nvar mapMatrix = function mapMatrix(result, mapper) {\n  return {\n    type: 'matrix',\n    m: result.m,\n    n: result.n,\n    values: result.values.map(function (row) {\n      return row.map(mapper);\n    })\n  };\n};\n/**\n * Compiler-error and runtime-error on unhandled type\n *\n * @param typed: Object with type-property\n * @param getMessage: get an error message for runtime errors\n */\n\n\nfunction throwUnknownType(typed, getMessage) {\n  throw new Error(getMessage(typed && typed.type || 'unknown'));\n} // don't narrow from control-flow (ie. T remains ResultNode in switch)\n\n\nvar negate = function negate(value) {\n  var castValue = value;\n\n  switch (castValue.type) {\n    case 'number':\n      return valueWrap(-castValue.value);\n\n    case 'matrix':\n      return mapMatrix(castValue, function (cell) {\n        return negate(cell);\n      });\n\n    case 'unit':\n      return {\n        type: 'unit',\n        units: _objectSpread2({}, castValue.units),\n        value: negate(castValue.value)\n      };\n\n    default:\n      return throwUnknownType(castValue, function (type) {\n        return \"Equation resolve: cannot resolve type \\\"\".concat(type, \"\\\"\");\n      });\n  }\n};\n\nfunction plus(node, aTree, bTree) {\n  return handleCases(node, aTree, bTree, function (a, b) {\n    if (!isSameUnit(a, b)) {\n      throw new ResolverError('plusDifferentUnits', node, {});\n    }\n\n    return a;\n  }, // number, number\n  function (a, b) {\n    return valueWrap(a.value + b.value);\n  }, // number, matrix\n  function (a, b) {\n    return mapMatrix(b, function (cell) {\n      return plus(node, a, cell);\n    });\n  }, // matrix, number\n  function (a, b) {\n    return mapMatrix(a, function (cell) {\n      return plus(node, cell, b);\n    });\n  }, // matrix, matrix\n  function (a, b) {\n    if (a.n !== b.n || a.m !== b.m) {\n      throw new ResolverError('plusMatrixMismatch', node, {\n        aDimensions: \"\".concat(a.m, \"x\").concat(a.n),\n        bDimensions: \"\".concat(b.m, \"x\").concat(b.n)\n      });\n    }\n\n    return {\n      type: 'matrix',\n      m: a.m,\n      n: a.n,\n      values: a.values.map(function (row, rowIdx) {\n        return row.map(function (cell, cellIdx) {\n          return plus(node, cell, b.values[rowIdx][cellIdx]);\n        });\n      })\n    };\n  });\n}\n\nfunction minus(node, a, b) {\n  return plus(node, a, negate(b));\n} // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\nfunction multiply(node, aTree, bTree, multiplyVectors) {\n  return handleCases(node, aTree, bTree, function (a, b) {\n    return combineUnits(a, b, function (unit1, unit2) {\n      return unit1 + unit2;\n    });\n  }, // number, number\n  function (a, b) {\n    return valueWrap(a.value * b.value);\n  }, // number, matrix\n  function (a, b) {\n    return mapMatrix(b, function (cell) {\n      return multiply(node, a, cell, multiplyVectors);\n    });\n  }, // matrix, number\n  function (a, b) {\n    return mapMatrix(a, function (cell) {\n      return multiply(node, cell, b, multiplyVectors);\n    });\n  }, // matrix, matrix\n  function (a, b) {\n    if (a.n === 1 && b.n === 1) {\n      return multiplyVectors(node, a, b);\n    } else {\n      return matrixProduct(node, a, b);\n    }\n  });\n}\n\nfunction scalarProduct(node, a, b) {\n  if (a.m !== b.m) {\n    throw new ResolverError('scalarProductUnbalanced', node, {\n      aLength: a.m,\n      bLength: b.m\n    });\n  }\n\n  var sum = a.values.reduce(function (current, row, rowIdx) {\n    return current + row[0].value * b.values[rowIdx][0].value;\n  }, 0);\n  return valueWrap(sum);\n}\n\nfunction vectorProduct(node, a, b) {\n  if (a.m !== 3 || b.m !== 3) {\n    throw new ResolverError('vectorProduct3VectorOnly', node, {});\n  }\n\n  return {\n    type: 'matrix',\n    n: 1,\n    m: 3,\n    values: [[valueWrap(a.values[1][0].value * b.values[2][0].value - a.values[2][0].value * b.values[1][0].value)], [valueWrap(a.values[2][0].value * b.values[0][0].value - a.values[0][0].value * b.values[2][0].value)], [valueWrap(a.values[0][0].value * b.values[1][0].value - a.values[1][0].value * b.values[0][0].value)]]\n  };\n}\n\nfunction matrixProduct(node, a, b) {\n  if (a.n !== b.m) {\n    throw new ResolverError('matrixProductMatrixMismatch', node, {\n      aDimensions: \"\".concat(a.m, \"x\").concat(a.n),\n      bDimensions: \"\".concat(b.m, \"x\").concat(b.n)\n    });\n  }\n\n  return {\n    type: 'matrix',\n    m: a.m,\n    n: b.n,\n    values: a.values.map(function (row, aRow) {\n      return b.values[0].map(function (cell, bCol) {\n        return valueWrap(a.values[aRow].reduce(function (current, innerCell, colIdx) {\n          return current + innerCell.value * b.values[colIdx][bCol].value;\n        }, 0));\n      });\n    })\n  };\n}\n\nfunction multiplyImplicit(node, a, b) {\n  if (a.type === 'matrix' && b.type === 'matrix' && a.n === 1 && b.n === 1) {\n    throw new ResolverError('multiplyImplicitNoVectors', node, {});\n  }\n\n  return multiply(node, a, b, scalarProduct);\n}\n\nfunction multiplyDot(node, a, b) {\n  return multiply(node, a, b, scalarProduct);\n}\n\nfunction multiplyCross(node, a, b) {\n  return multiply(node, a, b, vectorProduct);\n}\n\nfunction divide(node, aTree, bTree) {\n  if (aTree.type === 'matrix' && bTree.type === 'matrix') {\n    throw new ResolverError('divideMatrixMatrix', node, {});\n  }\n\n  if (bTree.type === 'number' && bTree.value === 0) {\n    throw new ResolverError('divideNotZero', node, {});\n  }\n\n  if (bTree.type === 'matrix' && bTree.values.some(function (row) {\n    return row.some(function (cell) {\n      return cell.value === 0;\n    });\n  })) {\n    throw new ResolverError('divideNotZero', node, {});\n  }\n\n  return handleCases(node, aTree, bTree, function (a, b) {\n    return combineUnits(a, b, function (factor1, factor2) {\n      return factor1 - factor2;\n    });\n  }, // number, number\n  function (a, b) {\n    return valueWrap(a.value / b.value);\n  }, // number, matrix\n  function (a, b) {\n    return mapMatrix(b, function (cell) {\n      return divide(node, a, cell);\n    });\n  }, // matrix, number\n  function (a, b) {\n    return mapMatrix(a, function (cell) {\n      return divide(node, cell, b);\n    });\n  }, // matrix, matrix\n  null);\n}\n\nfunction power(node, aTree, bTree) {\n  if (bTree.type !== 'number') {\n    throw new ResolverError('powerUnitlessNumberExponent', node, {});\n  }\n\n  return handleCases(node, aTree, bTree, function (a) {\n    return mapUnit(a, function (factor) {\n      return factor * bTree.value;\n    });\n  }, // number, number\n  function (a, b) {\n    return valueWrap(Math.pow(a.value, b.value));\n  }, // number, matrix\n  null, // matrix, number\n  function (a, b) {\n    return mapMatrix(a, function (cell) {\n      return valueWrap(Math.pow(cell.value, b.value));\n    });\n  }, // matrix, matrix\n  null);\n}\n\nfunction handleCases(node, a, b, combineUnits, numberNumber, numberMatrix, matrixNumber, matrixMatrix) {\n  if (a.type === 'unit' || b.type === 'unit') {\n    var units = combineUnits(getUnit(a), getUnit(b));\n    var result = handleCases(node, getUnitless(a), getUnitless(b), combineUnits, numberNumber, numberMatrix, matrixNumber, matrixMatrix);\n\n    if (isEmptyUnit(units)) {\n      return result;\n    } else {\n      return {\n        type: 'unit',\n        units: units,\n        value: result\n      };\n    }\n  }\n\n  switch (a.type) {\n    case 'number':\n      switch (b.type) {\n        case 'number':\n          if (numberNumber) {\n            return numberNumber(a, b);\n          }\n\n          break;\n\n        case 'matrix':\n          if (numberMatrix) {\n            return numberMatrix(a, b);\n          }\n\n          break;\n      }\n\n      break;\n\n    case 'matrix':\n      {\n        switch (b.type) {\n          case 'number':\n            if (matrixNumber) {\n              return matrixNumber(a, b);\n            }\n\n            break;\n\n          case 'matrix':\n            if (matrixMatrix) {\n              return matrixMatrix(a, b);\n            }\n\n            break;\n        }\n\n        break;\n      }\n  }\n\n  throw new ResolverError('operatorInvalidArguments', node, {\n    operator: node.type,\n    a: a.type,\n    b: b.type\n  });\n}\n\nvar resolve = function resolve(node) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (node.type === 'parser-error') {\n    return {\n      type: 'resolve-error',\n      errorType: 'invalidEquation',\n      errorNode: null\n    };\n  }\n\n  try {\n    return resolveNode(node, options);\n  } catch (error) {\n    if (error instanceof ResolverError) {\n      return error.getResolveError();\n    } else {\n      throw error;\n    }\n  }\n};\n\nvar resolveNode = function resolveNode(node, options) {\n  switch (node.type) {\n    case 'number':\n      return {\n        type: 'number',\n        value: parseFloat(node.value)\n      };\n\n    case 'variable':\n      return resolveVariable(node, options);\n\n    case 'positive':\n      return resolveNode(node.value, options);\n\n    case 'negative':\n      return negate(resolveNode(node.value, options));\n\n    case 'positive-negative':\n      throw new ResolverError('plusminusUnhandled', node, {});\n\n    case 'block':\n      return resolveNode(node.child, options);\n\n    case 'plus':\n      return plus(node, resolveNode(node.a, options), resolveNode(node.b, options));\n\n    case 'minus':\n      return minus(node, resolveNode(node.a, options), resolveNode(node.b, options));\n\n    case 'plus-minus':\n      throw new ResolverError('plusminusUnhandled', node, {});\n\n    case 'multiply-implicit':\n      return multiplyImplicit(node, resolveNode(node.a, options), resolveNode(node.b, options));\n\n    case 'multiply-dot':\n      return multiplyDot(node, resolveNode(node.a, options), resolveNode(node.b, options));\n\n    case 'multiply-cross':\n      return multiplyCross(node, resolveNode(node.a, options), resolveNode(node.b, options));\n\n    case 'divide-fraction':\n    case 'divide-inline':\n      return divide(node, resolveNode(node.a, options), resolveNode(node.b, options));\n\n    case 'power':\n      return power(node, resolveNode(node.a, options), resolveNode(node.b, options));\n\n    case 'function':\n      return resolveFunction(node, options);\n\n    case 'equals':\n    case 'less-than':\n    case 'less-than-equals':\n    case 'greater-than':\n    case 'greater-than-equals':\n    case 'approximates':\n      throw new ResolverError('noComparison', node, {});\n\n    case 'matrix':\n      {\n        // Keep track of resolved unit\n        var unit = null;\n        var values = node.values.map(function (row) {\n          return row.map(function (cell) {\n            var value = resolveNode(cell, options); // Compare units\n\n            if (unit) {\n              if (!isSameUnit(unit, getUnit(value))) {\n                throw new ResolverError('matrixDifferentUnits', node, {});\n              }\n            } else {\n              unit = getUnit(value);\n            } // Ensure all children are unitless numbers\n\n\n            var unitlessValue = getUnitless(value);\n\n            if (unitlessValue.type !== 'number') {\n              throw new ResolverError('matrixNoNesting', node, {});\n            }\n\n            return unitlessValue;\n          });\n        }); // Wrap in unit if necessary\n\n        if (!unit || isEmptyUnit(unit)) {\n          return {\n            type: 'matrix',\n            m: node.m,\n            n: node.n,\n            values: values\n          };\n        } else {\n          return {\n            type: 'unit',\n            units: unit,\n            value: {\n              type: 'matrix',\n              m: node.m,\n              n: node.n,\n              values: values\n            }\n          };\n        }\n      }\n\n    case 'function-placeholder':\n    case 'operand-placeholder':\n    case 'operator-placeholder':\n    case 'operator-unary-placeholder':\n      throw new ResolverError('placeholder', node, {});\n\n    default:\n      return throwUnknownType(node, function (type) {\n        return \"Equation resolve: cannot resolve type \\\"\".concat(type, \"\\\"\");\n      });\n  }\n};\n\nfunction resolveVariable(node, options) {\n  if (!options.variables || !options.variables[node.name]) {\n    throw new ResolverError('variableUnknown', node, {\n      name: node.name\n    });\n  }\n\n  return options.variables[node.name];\n}\n\nfunction resolveFunction(node, options) {\n  if (!options.functions || !options.functions[node.name]) {\n    throw new ResolverError('functionUnknown', node, {\n      name: node.name\n    });\n  }\n\n  return options.functions[node.name](node, options);\n}\n\nvar createResolverFunction = function createResolverFunction(argNames, expression, options) {\n  var expressionOptions = {\n    variables: _objectSpread2({}, options.variables),\n    functions: _objectSpread2({}, options.functions)\n  };\n  return function (node, argOptions) {\n    checkArgs(node, argNames.length, argNames.length);\n    argNames.forEach(function (n, idx) {\n      expressionOptions.variables[n] = resolveNode(node.args[idx], argOptions);\n    });\n    return resolveNode(expression, expressionOptions);\n  };\n};\n\nvar defaultSimplifiableUnits = ['N', 'J', 'W', 'Pa', 'Hz', 'lx', 'C', 'V', 'F', 'Ω', 'S', 'Wb', 'T', 'H', 'Gy'];\n\nvar format = function format(equation) {\n  var unit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (equation.type === 'parser-error') {\n    return equation;\n  }\n\n  if (unit && unit.type === 'parser-error') {\n    return unit;\n  }\n\n  if (unit && !isUnitTree(unit)) {\n    return {\n      type: 'resolve-error',\n      errorType: 'invalidUnit',\n      node: wrapError(equation, unit),\n      errorNode: unit\n    };\n  }\n\n  var result = resolve(equation, options);\n  var unitResult = unit ? resolve(unit, options) : null;\n\n  if (result.type === 'resolve-error') {\n    return _objectSpread2(_objectSpread2({}, result), {}, {\n      node: wrapError(equation, unit)\n    });\n  }\n\n  if (unitResult && unitResult.type === 'resolve-error') {\n    return _objectSpread2(_objectSpread2({}, unitResult), {}, {\n      node: wrapError(equation, unit)\n    });\n  }\n\n  if (unitResult && !isUnitResult(unitResult)) {\n    return {\n      type: 'resolve-error',\n      errorType: 'invalidUnit',\n      node: wrapError(equation, unit),\n      errorNode: unit\n    };\n  }\n\n  return {\n    type: 'equals',\n    a: equation,\n    b: resultToEquationWithUnit(result, unit, unitResult, options)\n  };\n};\n\nvar wrapError = function wrapError(equation, unit) {\n  return {\n    type: 'equals',\n    a: equation,\n    b: unit ? {\n      type: 'multiply-implicit',\n      a: {\n        type: 'operand-placeholder'\n      },\n      b: unit\n    } : {\n      type: 'operand-placeholder'\n    }\n  };\n};\n\nfunction resultToEquationWithUnit(result, unit, unitResult, options) {\n  if (unit && unitResult) {\n    var value = divide(unit, getUnitless(result), getUnitless(unitResult));\n    var diffUnits = combineUnits(getUnit(result), getUnit(unitResult), function (a, b) {\n      return a - b;\n    });\n\n    if (isEmptyUnit(diffUnits)) {\n      return wrapUnit(resultToEquation(value, options), unit);\n    } else {\n      return wrapUnit(resultToEquation(value, options), {\n        type: 'multiply-implicit',\n        a: unit,\n        b: unitToEquation(diffUnits)\n      });\n    }\n  } else {\n    return resultToEquation(result, options);\n  }\n}\n\nfunction resultToEquation(result, options) {\n  switch (result.type) {\n    case 'number':\n      if (result.value < 0) {\n        return {\n          type: 'negative',\n          value: simplifyNumber(-result.value)\n        };\n      } else {\n        return simplifyNumber(result.value);\n      }\n\n    case 'matrix':\n      return {\n        type: 'matrix',\n        m: result.m,\n        n: result.n,\n        values: result.values.map(function (row) {\n          return row.map(function (cell) {\n            return resultToEquation(cell, options);\n          });\n        })\n      };\n\n    case 'unit':\n      {\n        var unit = guessUnit(result, options);\n        return wrapUnit(resultToEquation(unit.value, options), unitToEquation(unit.units));\n      }\n  }\n}\n\nfunction simplifyNumber(value) {\n  // Handle infinity\n  if (value === Infinity) {\n    return {\n      type: 'variable',\n      name: '∞'\n    };\n  } // Float exponent\n\n\n  var factor = Math.log10(value);\n\n  if (value === 0 || Math.abs(factor) < 5) {\n    // Retain regular number\n    return {\n      type: 'number',\n      value: formatNumber(value)\n    };\n  } else {\n    // Rewrite as power-of-ten\n    var exponent = Math.floor(factor);\n    var significand = value / Math.pow(10, exponent);\n    return {\n      type: 'multiply-dot',\n      a: {\n        type: 'number',\n        value: formatNumber(significand)\n      },\n      b: {\n        type: 'power',\n        a: {\n          type: 'number',\n          value: '10'\n        },\n        b: {\n          type: 'number',\n          value: formatNumber(exponent)\n        }\n      }\n    };\n  }\n}\n\nfunction formatNumber(value) {\n  var digits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n  var commaSep = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '.';\n  return ensurePrecision(value, digits).split('.').join(commaSep);\n} // number.toPrecision with trailing zeros stripped\n// Avoids scientific notation for large numbers\n\n\nfunction ensurePrecision(value, digits) {\n  // Handle cases where scientific notation would be used\n  if (Math.log(Math.abs(value)) * Math.LOG10E >= digits) {\n    return Math.round(value).toString();\n  } // Strip trailing zeroes\n\n\n  return Number(value.toPrecision(digits)).toString();\n}\n\nfunction isUnitTree(unitTree) {\n  switch (unitTree.type) {\n    case 'multiply-implicit':\n    case 'multiply-dot':\n    case 'multiply-cross':\n    case 'divide-fraction':\n    case 'divide-inline':\n      return isUnitTree(unitTree.a) && isUnitTree(unitTree.b);\n\n    case 'power':\n      return unitTree.a.type === 'variable' && unitTree.b.type === 'number';\n\n    case 'variable':\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nfunction isUnitResult(unitResult) {\n  switch (unitResult.type) {\n    case 'unit':\n      return isUnitResult(unitResult.value);\n\n    case 'number':\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nfunction wrapUnit(value, units) {\n  // Retain proper ordering of operations be letting negative wrap multiplication\n  if (value.type === 'negative') {\n    return {\n      type: 'negative',\n      value: {\n        type: 'multiply-implicit',\n        a: value.value,\n        b: units\n      }\n    };\n  } else {\n    return {\n      type: 'multiply-implicit',\n      a: value,\n      b: units\n    };\n  }\n}\n\nfunction guessUnit(result, _ref) {\n  var _ref$simplifiableUnit = _ref.simplifiableUnits,\n      simplifiableUnits = _ref$simplifiableUnit === void 0 ? defaultSimplifiableUnits : _ref$simplifiableUnit,\n      _ref$variables = _ref.variables,\n      variables = _ref$variables === void 0 ? {} : _ref$variables;\n  var unit = simplifiableUnits.find(function (u) {\n    var variable = variables[u];\n    return variable && variable.type === 'unit' && variable.value.type === 'number' && isSameUnit(variable.units, result.units);\n  });\n\n  if (unit) {\n    var variable = variables[unit];\n    return {\n      type: 'unit',\n      units: _defineProperty({}, unit, 1),\n      value: divide({}, result.value, variable.value)\n    };\n  } else {\n    return result;\n  }\n}\n\nfunction getExponent(unit, factor) {\n  if (factor === 1) {\n    return {\n      type: 'variable',\n      name: unit\n    };\n  } else {\n    return {\n      type: 'power',\n      a: {\n        type: 'variable',\n        name: unit\n      },\n      b: {\n        type: 'number',\n        value: factor.toString()\n      }\n    };\n  }\n}\n\nfunction unitToEquation(units) {\n  // Terms above fraction\n  var positive = []; // Terms below fraction\n\n  var negative = [];\n\n  for (var _i = 0, _Object$entries = Object.entries(units); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n        unit = _Object$entries$_i[0],\n        factor = _Object$entries$_i[1];\n\n    if (factor > 0) {\n      positive.push(getExponent(unit, factor));\n    } else {\n      negative.push(getExponent(unit, -factor));\n    }\n  }\n\n  if (negative.length === 0) {\n    return multiplyList(positive);\n  }\n\n  return {\n    type: 'divide-fraction',\n    a: multiplyList(positive),\n    b: multiplyList(negative)\n  };\n}\n\nfunction multiplyList(list) {\n  if (list.length === 0) {\n    return {\n      type: 'number',\n      value: '1'\n    };\n  }\n\n  var current = list[0]; // Build multiplication tree\n\n  for (var i = 1; i < list.length; i++) {\n    current = {\n      type: 'multiply-implicit',\n      a: current,\n      b: list[i]\n    };\n  }\n\n  return current;\n}\n\nvar isInteger = function isInteger(x) {\n  return x.type === 'number' && Math.round(x.value) === x.value;\n};\n\nvar createNumberFunction = function createNumberFunction(func) {\n  var minArgs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var maxArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : minArgs;\n  var validate = arguments.length > 3 ? arguments[3] : undefined;\n  return function (node, options) {\n    checkArgs(node, minArgs, maxArgs);\n    var resolvedArgs = node.args.map(function (arg) {\n      return resolveNode(arg, options);\n    });\n    var nonNumber = resolvedArgs.findIndex(function (arg) {\n      return arg.type !== 'number';\n    });\n\n    if (nonNumber !== -1) {\n      throw new ResolverError('functionNumberOnly', node.args[nonNumber], {\n        name: node.name\n      });\n    }\n\n    var numberArgs = resolvedArgs.map(function (arg) {\n      return arg.value;\n    });\n\n    if (validate) {\n      var result = validate.apply(void 0, [node.name].concat(_toConsumableArray(numberArgs)));\n\n      if (result) {\n        throw new ResolverError(result[1], node.args[result[0]], {\n          name: node.name\n        });\n      }\n    }\n\n    return valueWrap(func.apply(void 0, _toConsumableArray(numberArgs)));\n  };\n};\n\nvar defaultFunctions = {\n  sin: createNumberFunction(Math.sin),\n  cos: createNumberFunction(Math.cos),\n  tan: createNumberFunction(Math.tan),\n  asin: createNumberFunction(Math.asin),\n  acos: createNumberFunction(Math.acos),\n  atan: createNumberFunction(Math.atan),\n  atan2: createNumberFunction(Math.atan2, 2),\n  abs: createNumberFunction(Math.abs),\n  ceil: createNumberFunction(Math.ceil),\n  floor: createNumberFunction(Math.floor),\n  round: createNumberFunction(function (x) {\n    var precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var factor = Math.pow(10, precision);\n    return Math.round(x * factor) / factor;\n  }, 1, 2),\n  max: createNumberFunction(Math.max, 1, Infinity),\n  min: createNumberFunction(Math.min, 1, Infinity),\n  pow: createNumberFunction(Math.pow, 2),\n  sqrt: createNumberFunction(Math.sqrt, 1, 1, function (name, x) {\n    if (x < 0) {\n      return [0, 'functionSqrt1Positive'];\n    }\n  }),\n  root: createNumberFunction(function (f, x) {\n    return Math.sign(x) * Math.pow(Math.abs(x), 1 / f);\n  }, 2, 2, function (name, f, x) {\n    if (Math.round(f) !== f || f <= 0) {\n      return [0, 'functionRoot1PositiveInteger'];\n    }\n\n    if (f % 2 === 0 && x < 0) {\n      return [1, 'functionRoot2Positive'];\n    }\n  }),\n  ln: createNumberFunction(Math.log),\n  log: createNumberFunction(function (x) {\n    var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n    return Math.log(x) / Math.log(base);\n  }, 1, 2),\n  sum: function sum(node, options) {\n    checkArgs(node, 4, 4);\n\n    var _node$args = _slicedToArray(node.args, 4),\n        variable = _node$args[0],\n        startTree = _node$args[1],\n        endTree = _node$args[2],\n        expression = _node$args[3];\n\n    if (variable.type !== 'variable') {\n      throw new ResolverError('functionSum1Variable', variable, {\n        name: node.name,\n        variableType: variable.type\n      });\n    }\n\n    var start = resolveNode(startTree, options);\n    var end = resolveNode(endTree, options);\n\n    if (!isInteger(start)) {\n      throw new ResolverError('functionSum2Integer', startTree, {\n        name: node.name\n      });\n    }\n\n    if (!isInteger(end)) {\n      throw new ResolverError('functionSum3Integer', endTree, {\n        name: node.name\n      });\n    }\n\n    if (start > end) {\n      var _ref = [end, start];\n      start = _ref[0];\n      end = _ref[1];\n    }\n\n    var enhancedOptions = {\n      functions: options.functions,\n      variables: _objectSpread2({}, options.variables)\n    }; // Get initial value\n\n    enhancedOptions.variables[variable.name] = start;\n    var sum = resolveNode(expression, enhancedOptions);\n\n    for (var i = start.value + 1; i <= end.value; i++) {\n      enhancedOptions.variables[variable.name] = valueWrap(i);\n      sum = plus(node, sum, resolveNode(expression, enhancedOptions));\n    }\n\n    return sum;\n  }\n};\nvar defaultVariables = {\n  // ========================================================================\n  // Mathematical constants\n  // ========================================================================\n  'e': valueWrap(Math.E),\n  'pi': valueWrap(Math.PI),\n  'π': valueWrap(Math.PI),\n  'phi': valueWrap(1.618033988749895),\n  'φ': valueWrap(1.618033988749895),\n  // ========================================================================\n  // Length\n  // ========================================================================\n  // SI ---------------------------------------------------------------------\n  'pm': unitWrap(1e-12, {\n    m: 1\n  }),\n  // picometer\n  'nm': unitWrap(1e-9, {\n    m: 1\n  }),\n  // nanometer\n  'μm': unitWrap(1e-6, {\n    m: 1\n  }),\n  // micrometer\n  'mm': unitWrap(1e-3, {\n    m: 1\n  }),\n  // millimeter\n  'cm': unitWrap(1e-2, {\n    m: 1\n  }),\n  // centimeter\n  'dm': unitWrap(1e-1, {\n    m: 1\n  }),\n  // decimeter\n  'm': unitWrap(1e0, {\n    m: 1\n  }),\n  // meter (base unit)\n  'km': unitWrap(1e3, {\n    m: 1\n  }),\n  // kilometer\n  'Mm': unitWrap(1e6, {\n    m: 1\n  }),\n  // megameter\n  'Gm': unitWrap(1e9, {\n    m: 1\n  }),\n  // gigameter\n  // Imperial ---------------------------------------------------------------\n  'thou': unitWrap(2.54e-7, {\n    m: 1\n  }),\n  // thou, 1/1000 inch\n  'mil': unitWrap(2.54e-7, {\n    m: 1\n  }),\n  // mil, 1/1000 inch\n  'in': unitWrap(2.54e-2, {\n    m: 1\n  }),\n  // inch\n  '\"': unitWrap(2.54e-2, {\n    m: 1\n  }),\n  // inch, \" symbol\n  'ft': unitWrap(0.3048, {\n    m: 1\n  }),\n  // foot\n  '\\'': unitWrap(0.3048, {\n    m: 1\n  }),\n  // foot, ' symbol\n  'yd': unitWrap(0.9144, {\n    m: 1\n  }),\n  // yard\n  'mi': unitWrap(1609.344, {\n    m: 1\n  }),\n  // mile\n  // Others -----------------------------------------------------------------\n  'NM': unitWrap(1852, {\n    m: 1\n  }),\n  // natical mile\n  'nmi': unitWrap(1852, {\n    m: 1\n  }),\n  // natical mile\n  'Å': unitWrap(1e-10, {\n    m: 1\n  }),\n  // ångström\n  'AU': unitWrap(1.4959787e11, {\n    m: 1\n  }),\n  // astronomical unit\n  'pc': unitWrap(3.0856776e16, {\n    m: 1\n  }),\n  // parsec\n  'ls': unitWrap(2.99792458e8, {\n    m: 1\n  }),\n  // light-second\n  'ly': unitWrap(9.46073047e15, {\n    m: 1\n  }),\n  // light-year\n  'Kly': unitWrap(9.46073047e18, {\n    m: 1\n  }),\n  // kilolight-year\n  'Mly': unitWrap(9.46073047e21, {\n    m: 1\n  }),\n  // megalight-year\n  'Gly': unitWrap(9.46073047e24, {\n    m: 1\n  }),\n  // gigalight-year\n  // ========================================================================\n  // Area\n  // ========================================================================\n  // Imperial ---------------------------------------------------------------\n  'ac': unitWrap(4046.856, {\n    m: 2\n  }),\n  // acre (international)\n  // Others -----------------------------------------------------------------\n  'ha': unitWrap(1e4, {\n    m: 2\n  }),\n  // hectare\n  'b': unitWrap(1e-28, {\n    m: 2\n  }),\n  // barn (physics)\n  // ========================================================================\n  // Volume\n  // ========================================================================\n  // SI ---------------------------------------------------------------------\n  'μL': unitWrap(1e-9, {\n    m: 3\n  }),\n  // microliter\n  'mL': unitWrap(1e-6, {\n    m: 3\n  }),\n  // milliliter\n  'cL': unitWrap(1e-5, {\n    m: 3\n  }),\n  // centiliter\n  'dL': unitWrap(1e-4, {\n    m: 3\n  }),\n  // deciliter\n  'L': unitWrap(1e-3, {\n    m: 3\n  }),\n  // liter\n  // Imperial ---------------------------------------------------------------\n  'pt': unitWrap(5.68e-4, {\n    m: 3\n  }),\n  // pint (imperial)\n  'qt': unitWrap(1.13652e-3, {\n    m: 3\n  }),\n  // quart (imperial)\n  'gal': unitWrap(4.54609e-3, {\n    m: 3\n  }),\n  // gallon (imperial)\n  'pt_l': unitWrap(4.73e-4, {\n    m: 3\n  }),\n  // pint (US liquid)\n  'qt_l': unitWrap(9.46e-4, {\n    m: 3\n  }),\n  // quart (US liquid)\n  'gal_l': unitWrap(3.785e-3, {\n    m: 3\n  }),\n  // gallon (US liquid)\n  'pt_d': unitWrap(5.51e-4, {\n    m: 3\n  }),\n  // pint (US dry)\n  'qt_d': unitWrap(1.101e-3, {\n    m: 3\n  }),\n  // quart (US dry)\n  'gal_d': unitWrap(4.405e-3, {\n    m: 3\n  }),\n  // gallon (US dry)\n  // ========================================================================\n  // Mass\n  // ========================================================================\n  // SI ---------------------------------------------------------------------\n  'ng': unitWrap(1e-12, {\n    kg: 1\n  }),\n  // nanogram\n  'μg': unitWrap(1e-9, {\n    kg: 1\n  }),\n  // microgram\n  'mg': unitWrap(1e-6, {\n    kg: 1\n  }),\n  // milligram\n  'g': unitWrap(1e-3, {\n    kg: 1\n  }),\n  // gram\n  'kg': unitWrap(1e0, {\n    kg: 1\n  }),\n  // kilogram (base unit)\n  'Mg': unitWrap(1e3, {\n    kg: 1\n  }),\n  // megagram\n  'Gg': unitWrap(1e6, {\n    kg: 1\n  }),\n  // gigagram\n  't': unitWrap(1e3, {\n    kg: 1\n  }),\n  // tonne (metric ton)\n  'u': unitWrap(1.660539e-27, {\n    kg: 1\n  }),\n  // unified atomic mass unit\n  'Da': unitWrap(1.660539e-27, {\n    kg: 1\n  }),\n  // dalton\n  // Imperial ---------------------------------------------------------------\n  'oz': unitWrap(2.83495e-3, {\n    kg: 1\n  }),\n  // ounce\n  'lb': unitWrap(0.453592, {\n    kg: 1\n  }),\n  // pound\n  'st': unitWrap(6.350293, {\n    kg: 1\n  }),\n  // stone\n  'ton': unitWrap(1.0160e3, {\n    kg: 1\n  }),\n  // ton\n  // ========================================================================\n  // Time\n  // ========================================================================\n  // SI ---------------------------------------------------------------------\n  'as': unitWrap(1e-18, {\n    s: 1\n  }),\n  // attosecond\n  'fs': unitWrap(1e-15, {\n    s: 1\n  }),\n  // femtosecond\n  'ps': unitWrap(1e-12, {\n    s: 1\n  }),\n  // picosecond\n  'ns': unitWrap(1e-9, {\n    s: 1\n  }),\n  // nanosecond\n  'μs': unitWrap(1e-6, {\n    s: 1\n  }),\n  // microsecond\n  'ms': unitWrap(1e-3, {\n    s: 1\n  }),\n  // millisecond\n  's': unitWrap(1e0, {\n    s: 1\n  }),\n  // second (base unit)\n  // Others -----------------------------------------------------------------\n  'min': unitWrap(60, {\n    s: 1\n  }),\n  // minute\n  'h': unitWrap(3600, {\n    s: 1\n  }),\n  // hour\n  'hr': unitWrap(3600, {\n    s: 1\n  }),\n  // hour\n  'd': unitWrap(86400, {\n    s: 1\n  }),\n  // day\n  'day': unitWrap(86400, {\n    s: 1\n  }),\n  // day\n  'y': unitWrap(31557600, {\n    s: 1\n  }),\n  // year (Julian, 365.25 days)\n  'yr': unitWrap(31557600, {\n    s: 1\n  }),\n  // year (Julian, 365.25 days)\n  // ========================================================================\n  // Frequency\n  // ========================================================================\n  'nHz': unitWrap(1e-9, {\n    s: -1\n  }),\n  // nanohertz\n  'μHz': unitWrap(1e-6, {\n    s: -1\n  }),\n  // microhertz\n  'mHz': unitWrap(1e-3, {\n    s: -1\n  }),\n  // millihertz\n  'Hz': unitWrap(1e0, {\n    s: -1\n  }),\n  // hertz\n  'kHz': unitWrap(1e3, {\n    s: -1\n  }),\n  // kilohertz\n  'MHz': unitWrap(1e6, {\n    s: -1\n  }),\n  // megahertz\n  'GHz': unitWrap(1e9, {\n    s: -1\n  }),\n  // gigahertz\n  'THz': unitWrap(1e12, {\n    s: -1\n  }),\n  // terahertz\n  'PHz': unitWrap(1e15, {\n    s: -1\n  }),\n  // petahertz\n  // ========================================================================\n  // Angle\n  // ========================================================================\n  'rad': valueWrap(1),\n  // radian\n  'sr': valueWrap(1),\n  // steradian\n  'deg': valueWrap(0.01745329252),\n  // degree\n  '°': valueWrap(0.01745329252),\n  // degree (symbol)\n  // ========================================================================\n  // Ratio\n  // ========================================================================\n  '%': valueWrap(0.01),\n  // percent\n  '‰': valueWrap(0.001),\n  // permille\n  // ========================================================================\n  // Temperature\n  // ========================================================================\n  'K': unitWrap(1, {\n    K: 1\n  }),\n  // Kelvin (base unit)\n  '°C': unitWrap(1, {\n    K: 1\n  }),\n  // degree Celcius\n  '°F': unitWrap(0.555556, {\n    K: 1\n  }),\n  // degree Fahrenheit\n  '°R': unitWrap(0.555556, {\n    K: 1\n  }),\n  // degree Rankine\n  // Offsets ----------------------------------------------------------------\n  '°C_0': unitWrap(273.15, {\n    K: 1\n  }),\n  // degree Celcius offset from absolute zero\n  '°F_0': unitWrap(255.372, {\n    K: 1\n  }),\n  // degree Fahrenheit offset from absolute zero\n  // ========================================================================\n  // Speed\n  // ========================================================================\n  'kph': unitWrap(0.27778, {\n    m: 1,\n    s: -1\n  }),\n  // kilometers per hour\n  'mph': unitWrap(0.44704, {\n    m: 1,\n    s: -1\n  }),\n  // miles per hour\n  'kn': unitWrap(0.514444, {\n    m: 1,\n    s: -1\n  }),\n  // knot, nautical mile per hour\n  'c': unitWrap(299792458, {\n    m: 1,\n    s: -1\n  }),\n  // Speed of light in vacuum\n  // ========================================================================\n  // Acceperation\n  // ========================================================================\n  'g_0': unitWrap(9.80665, {\n    m: 1,\n    s: -2\n  }),\n  // gravity of Earth\n  // ========================================================================\n  // Force\n  // ========================================================================\n  // SI ---------------------------------------------------------------------\n  'nN': unitWrap(1e-9, {\n    kg: 1,\n    m: 1,\n    s: -2\n  }),\n  // nanonewton\n  'μN': unitWrap(1e-6, {\n    kg: 1,\n    m: 1,\n    s: -2\n  }),\n  // micronewton\n  'mN': unitWrap(1e-3, {\n    kg: 1,\n    m: 1,\n    s: -2\n  }),\n  // millinewton\n  'N': unitWrap(1e0, {\n    kg: 1,\n    m: 1,\n    s: -2\n  }),\n  // newton\n  'kN': unitWrap(1e3, {\n    kg: 1,\n    m: 1,\n    s: -2\n  }),\n  // kilonewton\n  'MN': unitWrap(1e6, {\n    kg: 1,\n    m: 1,\n    s: -2\n  }),\n  // meganewton\n  'GN': unitWrap(1e9, {\n    kg: 1,\n    m: 1,\n    s: -2\n  }),\n  // giganewton\n  // Imperial ---------------------------------------------------------------\n  'ozf': unitWrap(0.278014, {\n    kg: 1,\n    m: 1,\n    s: -2\n  }),\n  // ounce force\n  'lbf': unitWrap(4.448222, {\n    kg: 1,\n    m: 1,\n    s: -2\n  }),\n  // pound force\n  // Others -----------------------------------------------------------------\n  'kgf': unitWrap(9.80665, {\n    kg: 1,\n    m: 1,\n    s: -2\n  }),\n  // kilogram force\n  // ========================================================================\n  // Energy\n  // ========================================================================\n  // SI ---------------------------------------------------------------------\n  'nJ': unitWrap(1e-9, {\n    kg: 1,\n    m: 2,\n    s: -2\n  }),\n  // nanojoule\n  'μJ': unitWrap(1e-6, {\n    kg: 1,\n    m: 2,\n    s: -2\n  }),\n  // microjoule\n  'mJ': unitWrap(1e-3, {\n    kg: 1,\n    m: 2,\n    s: -2\n  }),\n  // millijoule\n  'J': unitWrap(1e0, {\n    kg: 1,\n    m: 2,\n    s: -2\n  }),\n  // joule\n  'kJ': unitWrap(1e3, {\n    kg: 1,\n    m: 2,\n    s: -2\n  }),\n  // kilojoule\n  'MJ': unitWrap(1e6, {\n    kg: 1,\n    m: 2,\n    s: -2\n  }),\n  // megajoule\n  'GJ': unitWrap(1e9, {\n    kg: 1,\n    m: 2,\n    s: -2\n  }),\n  // gigajoule\n  'TJ': unitWrap(1e12, {\n    kg: 1,\n    m: 2,\n    s: -2\n  }),\n  // terajoule\n  'PJ': unitWrap(1e15, {\n    kg: 1,\n    m: 2,\n    s: -2\n  }),\n  // petajoule\n  // Others -----------------------------------------------------------------\n  'cal': unitWrap(4.1868, {\n    kg: 1,\n    m: 2,\n    s: -2\n  }),\n  // calorie\n  'kcal': unitWrap(4186.8, {\n    kg: 1,\n    m: 2,\n    s: -2\n  }),\n  // kilocalorie\n  'Cal': unitWrap(4186.8, {\n    kg: 1,\n    m: 2,\n    s: -2\n  }),\n  // kilocalorie\n  // ========================================================================\n  // Power\n  // ========================================================================\n  // SI ---------------------------------------------------------------------\n  'nW': unitWrap(1e-9, {\n    kg: 1,\n    m: 2,\n    s: -3\n  }),\n  // nanowatt\n  'μW': unitWrap(1e-6, {\n    kg: 1,\n    m: 2,\n    s: -3\n  }),\n  // microwatt\n  'mW': unitWrap(1e-3, {\n    kg: 1,\n    m: 2,\n    s: -3\n  }),\n  // milliwatt\n  'W': unitWrap(1e0, {\n    kg: 1,\n    m: 2,\n    s: -3\n  }),\n  // watt\n  'kW': unitWrap(1e3, {\n    kg: 1,\n    m: 2,\n    s: -3\n  }),\n  // kilowatt\n  'MW': unitWrap(1e6, {\n    kg: 1,\n    m: 2,\n    s: -3\n  }),\n  // megawatt\n  'GW': unitWrap(1e9, {\n    kg: 1,\n    m: 2,\n    s: -3\n  }),\n  // gigawatt\n  'TW': unitWrap(1e12, {\n    kg: 1,\n    m: 2,\n    s: -3\n  }),\n  // terawatt\n  'PW': unitWrap(1e15, {\n    kg: 1,\n    m: 2,\n    s: -3\n  }),\n  // petawatt\n  // ========================================================================\n  // Pressure\n  // ========================================================================\n  // SI ---------------------------------------------------------------------\n  'nPa': unitWrap(1e-9, {\n    kg: 1,\n    m: -1,\n    s: -2\n  }),\n  // nanopascal\n  'μPa': unitWrap(1e-6, {\n    kg: 1,\n    m: -1,\n    s: -2\n  }),\n  // micropascal\n  'mPa': unitWrap(1e-3, {\n    kg: 1,\n    m: -1,\n    s: -2\n  }),\n  // millipascal\n  'Pa': unitWrap(1e0, {\n    kg: 1,\n    m: -1,\n    s: -2\n  }),\n  // pascal\n  'kPa': unitWrap(1e3, {\n    kg: 1,\n    m: -1,\n    s: -2\n  }),\n  // kilopascal\n  'MPa': unitWrap(1e6, {\n    kg: 1,\n    m: -1,\n    s: -2\n  }),\n  // megapascal\n  'GPa': unitWrap(1e9, {\n    kg: 1,\n    m: -1,\n    s: -2\n  }),\n  // gigapascal\n  'TPa': unitWrap(1e12, {\n    kg: 1,\n    m: -1,\n    s: -2\n  }),\n  // terapascal\n  'PPa': unitWrap(1e15, {\n    kg: 1,\n    m: -1,\n    s: -2\n  }),\n  // petapascal\n  // Imperial ---------------------------------------------------------------\n  'psi': unitWrap(6.89475729e3, {\n    kg: 1,\n    m: -1,\n    s: -2\n  }),\n  // pounds per square inch\n  // Others -----------------------------------------------------------------\n  'atm': unitWrap(1.01325e5, {\n    kg: 1,\n    m: -1,\n    s: -2\n  }),\n  // standard atmosphere\n  'bar': unitWrap(1e5, {\n    kg: 1,\n    m: -1,\n    s: -2\n  }),\n  // bar\n  // ========================================================================\n  // Amount of substance\n  // ========================================================================\n  'nmol': unitWrap(1e-9, {\n    mol: 1\n  }),\n  // nanomole\n  'μmol': unitWrap(1e-6, {\n    mol: 1\n  }),\n  // micromole\n  'mmol': unitWrap(1e-3, {\n    mol: 1\n  }),\n  // millimole\n  'mol': unitWrap(1e0, {\n    mol: 1\n  }),\n  // mole (base unit)\n  'kmol': unitWrap(1e3, {\n    mol: 1\n  }),\n  // kilomole\n  'Mmol': unitWrap(1e6, {\n    mol: 1\n  }),\n  // megamole\n  'Gmol': unitWrap(1e9, {\n    mol: 1\n  }),\n  // gigamole\n  'Tmol': unitWrap(1e12, {\n    mol: 1\n  }),\n  // teramole\n  'Pmol': unitWrap(1e15, {\n    mol: 1\n  }),\n  // petamole\n  // Related ----------------------------------------------------------------\n  'N_A': unitWrap(6.022140857e23, {\n    mol: -1\n  }),\n  // Avogadro constant\n  // ========================================================================\n  // Luminous intensity\n  // ========================================================================\n  'ncd': unitWrap(1e-9, {\n    cd: 1\n  }),\n  // nanocandela\n  'μcd': unitWrap(1e-6, {\n    cd: 1\n  }),\n  // microcandela\n  'mcd': unitWrap(1e-3, {\n    cd: 1\n  }),\n  // millicandela\n  'cd': unitWrap(1e0, {\n    cd: 1\n  }),\n  // candela (base unit)\n  'kcd': unitWrap(1e3, {\n    cd: 1\n  }),\n  // kilocandela\n  'Mcd': unitWrap(1e6, {\n    cd: 1\n  }),\n  // megacandela\n  'Gcd': unitWrap(1e9, {\n    cd: 1\n  }),\n  // gigacandela\n  'Tcd': unitWrap(1e12, {\n    cd: 1\n  }),\n  // teracandela\n  'Pcd': unitWrap(1e15, {\n    cd: 1\n  }),\n  // petacandela\n  // ========================================================================\n  // Luminous flux\n  // ========================================================================\n  'nlm': unitWrap(1e-9, {\n    cd: 1\n  }),\n  // nanolumen\n  'μlm': unitWrap(1e-6, {\n    cd: 1\n  }),\n  // microlumen\n  'mlm': unitWrap(1e-3, {\n    cd: 1\n  }),\n  // millilumen\n  'lm': unitWrap(1e0, {\n    cd: 1\n  }),\n  // lumen\n  'klm': unitWrap(1e3, {\n    cd: 1\n  }),\n  // kilolumen\n  'Mlm': unitWrap(1e6, {\n    cd: 1\n  }),\n  // megalumen\n  'Glm': unitWrap(1e9, {\n    cd: 1\n  }),\n  // gigalumen\n  'Tlm': unitWrap(1e12, {\n    cd: 1\n  }),\n  // teralumen\n  'Plm': unitWrap(1e15, {\n    cd: 1\n  }),\n  // petalumen\n  // ========================================================================\n  // Illuminance\n  // ========================================================================\n  'nlx': unitWrap(1e-9, {\n    cd: 1,\n    m: -2\n  }),\n  // nanolux\n  'μlx': unitWrap(1e-6, {\n    cd: 1,\n    m: -2\n  }),\n  // microlux\n  'mlx': unitWrap(1e-3, {\n    cd: 1,\n    m: -2\n  }),\n  // millilux\n  'lx': unitWrap(1e0, {\n    cd: 1,\n    m: -2\n  }),\n  // lux\n  'klx': unitWrap(1e3, {\n    cd: 1,\n    m: -2\n  }),\n  // kilolux\n  'Mlx': unitWrap(1e6, {\n    cd: 1,\n    m: -2\n  }),\n  // megalux\n  'Glx': unitWrap(1e9, {\n    cd: 1,\n    m: -2\n  }),\n  // gigalux\n  'Tlx': unitWrap(1e12, {\n    cd: 1,\n    m: -2\n  }),\n  // teralux\n  'Plx': unitWrap(1e15, {\n    cd: 1,\n    m: -2\n  }),\n  // petalux\n  // ========================================================================\n  // Current\n  // ========================================================================\n  'nA': unitWrap(1e-9, {\n    A: 1\n  }),\n  // nanoampere\n  'μA': unitWrap(1e-6, {\n    A: 1\n  }),\n  // microampere\n  'mA': unitWrap(1e-3, {\n    A: 1\n  }),\n  // milliampere\n  'A': unitWrap(1e0, {\n    A: 1\n  }),\n  // ampere (base unit)\n  'kA': unitWrap(1e3, {\n    A: 1\n  }),\n  // kiloampere\n  'MA': unitWrap(1e6, {\n    A: 1\n  }),\n  // megaampere\n  'GA': unitWrap(1e9, {\n    A: 1\n  }),\n  // gigaampere\n  'TA': unitWrap(1e12, {\n    A: 1\n  }),\n  // teraampere\n  'PA': unitWrap(1e15, {\n    A: 1\n  }),\n  // petaampere\n  // ========================================================================\n  // Charge\n  // ========================================================================\n  'nC': unitWrap(1e-9, {\n    A: 1,\n    s: 1\n  }),\n  // nanocoulomb\n  'μC': unitWrap(1e-6, {\n    A: 1,\n    s: 1\n  }),\n  // microcoulomb\n  'mC': unitWrap(1e-3, {\n    A: 1,\n    s: 1\n  }),\n  // millicoulomb\n  'C': unitWrap(1e0, {\n    A: 1,\n    s: 1\n  }),\n  // coulomb\n  'kC': unitWrap(1e3, {\n    A: 1,\n    s: 1\n  }),\n  // kilocoulomb\n  'MC': unitWrap(1e6, {\n    A: 1,\n    s: 1\n  }),\n  // megacoulomb\n  'GC': unitWrap(1e9, {\n    A: 1,\n    s: 1\n  }),\n  // gigacoulomb\n  'TC': unitWrap(1e12, {\n    A: 1,\n    s: 1\n  }),\n  // teracoulomb\n  'PC': unitWrap(1e15, {\n    A: 1,\n    s: 1\n  }),\n  // petacoulomb\n  // ========================================================================\n  // Voltage\n  // ========================================================================\n  'nV': unitWrap(1e-9, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -1\n  }),\n  // nanovolt\n  'μV': unitWrap(1e-6, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -1\n  }),\n  // microvolt\n  'mV': unitWrap(1e-3, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -1\n  }),\n  // millivolt\n  'V': unitWrap(1e0, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -1\n  }),\n  // volt\n  'kV': unitWrap(1e3, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -1\n  }),\n  // kilovolt\n  'MV': unitWrap(1e6, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -1\n  }),\n  // megavolt\n  'GV': unitWrap(1e9, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -1\n  }),\n  // gigavolt\n  'TV': unitWrap(1e12, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -1\n  }),\n  // teravolt\n  'PV': unitWrap(1e15, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -1\n  }),\n  // petavolt\n  // ========================================================================\n  // Capacitance\n  // ========================================================================\n  'nF': unitWrap(1e-9, {\n    kg: -1,\n    m: -2,\n    s: 4,\n    A: 2\n  }),\n  // nanofarad\n  'μF': unitWrap(1e-6, {\n    kg: -1,\n    m: -2,\n    s: 4,\n    A: 2\n  }),\n  // microfarad\n  'mF': unitWrap(1e-3, {\n    kg: -1,\n    m: -2,\n    s: 4,\n    A: 2\n  }),\n  // millifarad\n  'F': unitWrap(1e0, {\n    kg: -1,\n    m: -2,\n    s: 4,\n    A: 2\n  }),\n  // farad\n  'kF': unitWrap(1e3, {\n    kg: -1,\n    m: -2,\n    s: 4,\n    A: 2\n  }),\n  // kilofarad\n  'MF': unitWrap(1e6, {\n    kg: -1,\n    m: -2,\n    s: 4,\n    A: 2\n  }),\n  // megafarad\n  'GF': unitWrap(1e9, {\n    kg: -1,\n    m: -2,\n    s: 4,\n    A: 2\n  }),\n  // gigafarad\n  'TF': unitWrap(1e12, {\n    kg: -1,\n    m: -2,\n    s: 4,\n    A: 2\n  }),\n  // terafarad\n  'PF': unitWrap(1e15, {\n    kg: -1,\n    m: -2,\n    s: 4,\n    A: 2\n  }),\n  // petafarad\n  // ========================================================================\n  // Resistance\n  // ========================================================================\n  'nΩ': unitWrap(1e-9, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -2\n  }),\n  // nanoohm\n  'μΩ': unitWrap(1e-6, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -2\n  }),\n  // microohm\n  'mΩ': unitWrap(1e-3, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -2\n  }),\n  // milliohm\n  'Ω': unitWrap(1e0, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -2\n  }),\n  // ohm\n  'kΩ': unitWrap(1e3, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -2\n  }),\n  // kiloohm\n  'MΩ': unitWrap(1e6, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -2\n  }),\n  // megaohm\n  'GΩ': unitWrap(1e9, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -2\n  }),\n  // gigaohm\n  'TΩ': unitWrap(1e12, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -2\n  }),\n  // teraohm\n  'PΩ': unitWrap(1e15, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -2\n  }),\n  // petaohm\n  // ========================================================================\n  // Resistance\n  // ========================================================================\n  'nS': unitWrap(1e-9, {\n    kg: -1,\n    m: -2,\n    s: 3,\n    A: 2\n  }),\n  // nanosiemens\n  'μS': unitWrap(1e-6, {\n    kg: -1,\n    m: -2,\n    s: 3,\n    A: 2\n  }),\n  // microsiemens\n  'mS': unitWrap(1e-3, {\n    kg: -1,\n    m: -2,\n    s: 3,\n    A: 2\n  }),\n  // millisiemens\n  'S': unitWrap(1e0, {\n    kg: -1,\n    m: -2,\n    s: 3,\n    A: 2\n  }),\n  // siemens\n  'kS': unitWrap(1e3, {\n    kg: -1,\n    m: -2,\n    s: 3,\n    A: 2\n  }),\n  // kilosiemens\n  'MS': unitWrap(1e6, {\n    kg: -1,\n    m: -2,\n    s: 3,\n    A: 2\n  }),\n  // megasiemens\n  'GS': unitWrap(1e9, {\n    kg: -1,\n    m: -2,\n    s: 3,\n    A: 2\n  }),\n  // gigasiemens\n  'TS': unitWrap(1e12, {\n    kg: -1,\n    m: -2,\n    s: 3,\n    A: 2\n  }),\n  // terasiemens\n  'PS': unitWrap(1e15, {\n    kg: -1,\n    m: -2,\n    s: 3,\n    A: 2\n  }),\n  // petasiemens\n  // ========================================================================\n  // Magnetic flux\n  // ========================================================================\n  'nWb': unitWrap(1e-9, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -1\n  }),\n  // nanoweber\n  'μWb': unitWrap(1e-6, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -1\n  }),\n  // microweber\n  'mWb': unitWrap(1e-3, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -1\n  }),\n  // milliweber\n  'Wb': unitWrap(1e0, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -1\n  }),\n  // weber\n  'kWb': unitWrap(1e3, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -1\n  }),\n  // kiloweber\n  'MWb': unitWrap(1e6, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -1\n  }),\n  // megaweber\n  'GWb': unitWrap(1e9, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -1\n  }),\n  // gigaweber\n  'TWb': unitWrap(1e12, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -1\n  }),\n  // teraweber\n  'PWb': unitWrap(1e15, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -1\n  }),\n  // petaweber\n  // ========================================================================\n  // Magnetic flux density\n  // ========================================================================\n  'nT': unitWrap(1e-9, {\n    kg: 1,\n    s: -2,\n    A: -1\n  }),\n  // nanotesla\n  'μT': unitWrap(1e-6, {\n    kg: 1,\n    s: -2,\n    A: -1\n  }),\n  // microtesla\n  'mT': unitWrap(1e-3, {\n    kg: 1,\n    s: -2,\n    A: -1\n  }),\n  // millitesla\n  'T': unitWrap(1e0, {\n    kg: 1,\n    s: -2,\n    A: -1\n  }),\n  // tesla\n  'kT': unitWrap(1e3, {\n    kg: 1,\n    s: -2,\n    A: -1\n  }),\n  // kilotesla\n  'MT': unitWrap(1e6, {\n    kg: 1,\n    s: -2,\n    A: -1\n  }),\n  // megatesla\n  'GT': unitWrap(1e9, {\n    kg: 1,\n    s: -2,\n    A: -1\n  }),\n  // gigatesla\n  'TT': unitWrap(1e12, {\n    kg: 1,\n    s: -2,\n    A: -1\n  }),\n  // teratesla\n  'PT': unitWrap(1e15, {\n    kg: 1,\n    s: -2,\n    A: -1\n  }),\n  // petatesla\n  // ========================================================================\n  // Magnetic flux\n  // ========================================================================\n  'nH': unitWrap(1e-9, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -2\n  }),\n  // nanohenry\n  'μH': unitWrap(1e-6, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -2\n  }),\n  // microhenry\n  'mH': unitWrap(1e-3, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -2\n  }),\n  // millihenry\n  'H': unitWrap(1e0, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -2\n  }),\n  // henry\n  'kH': unitWrap(1e3, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -2\n  }),\n  // kilohenry\n  'MH': unitWrap(1e6, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -2\n  }),\n  // megahenry\n  'GH': unitWrap(1e9, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -2\n  }),\n  // gigahenry\n  'TH': unitWrap(1e12, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -2\n  }),\n  // terahenry\n  'PH': unitWrap(1e15, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -2\n  }),\n  // petahenry\n  // ========================================================================\n  // Radioactivity (decays per unit of time)\n  // ========================================================================\n  'nBq': unitWrap(1e-9, {\n    s: -1\n  }),\n  // nanobecquerel\n  'μBq': unitWrap(1e-6, {\n    s: -1\n  }),\n  // microbecquerel\n  'mBq': unitWrap(1e-3, {\n    s: -1\n  }),\n  // millibecquerel\n  'Bq': unitWrap(1e0, {\n    s: -1\n  }),\n  // becquerel\n  'kBq': unitWrap(1e3, {\n    s: -1\n  }),\n  // kilobecquerel\n  'MBq': unitWrap(1e6, {\n    s: -1\n  }),\n  // megabecquerel\n  'GBq': unitWrap(1e9, {\n    s: -1\n  }),\n  // gigabecquerel\n  'TBq': unitWrap(1e12, {\n    s: -1\n  }),\n  // terabecquerel\n  'PBq': unitWrap(1e15, {\n    s: -1\n  }),\n  // petabecquerel\n  // ========================================================================\n  // Absorbed dose\n  // ========================================================================\n  'nGy': unitWrap(1e-9, {\n    m: 2,\n    s: -2\n  }),\n  // nanogray\n  'μGy': unitWrap(1e-6, {\n    m: 2,\n    s: -2\n  }),\n  // microgray\n  'mGy': unitWrap(1e-3, {\n    m: 2,\n    s: -2\n  }),\n  // milligray\n  'Gy': unitWrap(1e0, {\n    m: 2,\n    s: -2\n  }),\n  // gray\n  'kGy': unitWrap(1e3, {\n    m: 2,\n    s: -2\n  }),\n  // kilogray\n  'MGy': unitWrap(1e6, {\n    m: 2,\n    s: -2\n  }),\n  // megagray\n  'GGy': unitWrap(1e9, {\n    m: 2,\n    s: -2\n  }),\n  // gigagray\n  'TGy': unitWrap(1e12, {\n    m: 2,\n    s: -2\n  }),\n  // teragray\n  'PGy': unitWrap(1e15, {\n    m: 2,\n    s: -2\n  }),\n  // petagray\n  // ========================================================================\n  // Equivalent dose\n  // ========================================================================\n  'nSv': unitWrap(1e-9, {\n    m: 2,\n    s: -2\n  }),\n  // nanosievert\n  'μSv': unitWrap(1e-6, {\n    m: 2,\n    s: -2\n  }),\n  // microsievert\n  'mSv': unitWrap(1e-3, {\n    m: 2,\n    s: -2\n  }),\n  // millisievert\n  'Sv': unitWrap(1e0, {\n    m: 2,\n    s: -2\n  }),\n  // sievert\n  'kSv': unitWrap(1e3, {\n    m: 2,\n    s: -2\n  }),\n  // kilosievert\n  'MSv': unitWrap(1e6, {\n    m: 2,\n    s: -2\n  }),\n  // megasievert\n  'GSv': unitWrap(1e9, {\n    m: 2,\n    s: -2\n  }),\n  // gigasievert\n  'TSv': unitWrap(1e12, {\n    m: 2,\n    s: -2\n  }),\n  // terasievert\n  'PSv': unitWrap(1e15, {\n    m: 2,\n    s: -2\n  }),\n  // petasievert\n  // ========================================================================\n  // Data\n  // ========================================================================\n  'bit': unitWrap(1, {\n    bit: 1\n  }),\n  // bit\n  'B': unitWrap(8, {\n    bit: 1\n  }),\n  // byte\n  // Decimal bit (bit per IEC 60027) ----------------------------------------\n  'kbit': unitWrap(1e3, {\n    bit: 1\n  }),\n  // kilobit\n  'Mbit': unitWrap(1e6, {\n    bit: 1\n  }),\n  // megabit\n  'Gbit': unitWrap(1e9, {\n    bit: 1\n  }),\n  // gigabit\n  'Tbit': unitWrap(1e12, {\n    bit: 1\n  }),\n  // terabit\n  'Pbit': unitWrap(1e15, {\n    bit: 1\n  }),\n  // petabit\n  'Ebit': unitWrap(1e18, {\n    bit: 1\n  }),\n  // exabit\n  'Zbit': unitWrap(1e21, {\n    bit: 1\n  }),\n  // zettabit\n  'Ybit': unitWrap(1e24, {\n    bit: 1\n  }),\n  // yottabit\n  // Binary bit (bit per IEC 60027) -----------------------------------------\n  'Kibit': unitWrap(1024, {\n    bit: 1\n  }),\n  // kilobit\n  'Mibit': unitWrap(1048576, {\n    bit: 1\n  }),\n  // megabit\n  'Gibit': unitWrap(107374182, {\n    bit: 1\n  }),\n  // gigabit\n  'Tibit': unitWrap(1099511627776, {\n    bit: 1\n  }),\n  // terabit\n  'Pibit': unitWrap(1125899906842624, {\n    bit: 1\n  }),\n  // petabit\n  'Eibit': unitWrap(1152921504606847000, {\n    bit: 1\n  }),\n  // exabit\n  'Zibit': unitWrap(1180591620717411303424, {\n    bit: 1\n  }),\n  // zettabit\n  'Yibit': unitWrap(1208925819614629174706176, {\n    bit: 1\n  }),\n  // yottabit\n  // Decimal bit (b per IEEE 1541 Standard) ---------------------------------\n  'kb': unitWrap(1e3, {\n    bit: 1\n  }),\n  // kilobit\n  'Mb': unitWrap(1e6, {\n    bit: 1\n  }),\n  // megabit\n  'Gb': unitWrap(1e9, {\n    bit: 1\n  }),\n  // gigabit\n  'Tb': unitWrap(1e12, {\n    bit: 1\n  }),\n  // terabit\n  'Pb': unitWrap(1e15, {\n    bit: 1\n  }),\n  // petabit\n  'Eb': unitWrap(1e18, {\n    bit: 1\n  }),\n  // exabit\n  'Zb': unitWrap(1e21, {\n    bit: 1\n  }),\n  // zettabit\n  'Yb': unitWrap(1e24, {\n    bit: 1\n  }),\n  // yottabit\n  // Binary bit (b per IEEE 1541 Standard) ----------------------------------\n  'Kib': unitWrap(1024, {\n    bit: 1\n  }),\n  // kilobit\n  'Mib': unitWrap(1048576, {\n    bit: 1\n  }),\n  // megabit\n  'Gib': unitWrap(107374182, {\n    bit: 1\n  }),\n  // gigabit\n  'Tib': unitWrap(1099511627776, {\n    bit: 1\n  }),\n  // terabit\n  'Pib': unitWrap(1125899906842624, {\n    bit: 1\n  }),\n  // petabit\n  'Eib': unitWrap(1152921504606847000, {\n    bit: 1\n  }),\n  // exabit\n  'Zib': unitWrap(1180591620717411303424, {\n    bit: 1\n  }),\n  // zettabit\n  'Yib': unitWrap(1208925819614629174706176, {\n    bit: 1\n  }),\n  // yottabit\n  // Decimal byte -----------------------------------------------------------\n  'kB': unitWrap(8e3, {\n    bit: 1\n  }),\n  // kilobyte\n  'MB': unitWrap(8e6, {\n    bit: 1\n  }),\n  // megabyte\n  'GB': unitWrap(8e9, {\n    bit: 1\n  }),\n  // gigabyte\n  'TB': unitWrap(8e12, {\n    bit: 1\n  }),\n  // terabyte\n  'PB': unitWrap(8e15, {\n    bit: 1\n  }),\n  // petabyte\n  'EB': unitWrap(8e18, {\n    bit: 1\n  }),\n  // exabyte\n  'ZB': unitWrap(8e21, {\n    bit: 1\n  }),\n  // zettabyte\n  'YB': unitWrap(8e24, {\n    bit: 1\n  }),\n  // yottabyte\n  // Binary byte ------------------------------------------------------------\n  'KiB': unitWrap(8192, {\n    bit: 1\n  }),\n  // kilobyte\n  'MiB': unitWrap(8388608, {\n    bit: 1\n  }),\n  // megabyte\n  'GiB': unitWrap(8589934592, {\n    bit: 1\n  }),\n  // gigabyte\n  'TiB': unitWrap(8796093022208, {\n    bit: 1\n  }),\n  // terabyte\n  'PiB': unitWrap(9007199254740992, {\n    bit: 1\n  }),\n  // petabyte\n  'EiB': unitWrap(9223372036854776000, {\n    bit: 1\n  }),\n  // exabyte\n  'ZiB': unitWrap(9444732965739290427392, {\n    bit: 1\n  }),\n  // zettabyte\n  'YiB': unitWrap(9671406556917033397649408, {\n    bit: 1\n  }),\n  // yottabyte\n  // ========================================================================\n  // Miscellaneous\n  // ========================================================================\n  'G': unitWrap(6.67408e-11, {\n    m: 3,\n    kg: -1,\n    s: -2\n  }) // Gravitational constant\n\n};\n\nfunction unitWrap(value, units) {\n  return {\n    type: 'unit',\n    units: units,\n    value: valueWrap(value)\n  };\n}\n\nexport { createResolverFunction, defaultFunctions, defaultVariables, format, resolve };","map":{"version":3,"sources":["C:/Users/dell/Documents/ITT/MetodoBiseccionWebApp/frontend/node_modules/equation-resolver/dist/index.esm.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","_defineProperty","obj","value","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","arguments","source","forEach","getOwnPropertyDescriptors","defineProperties","_inherits","subClass","superClass","create","constructor","_setPrototypeOf","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","p","_isNativeReflectConstruct","Reflect","construct","sham","Proxy","Date","toString","call","e","_construct","Parent","args","Class","a","Function","bind","_isNativeFunction","fn","indexOf","_wrapNativeSuper","_cache","Map","undefined","has","get","set","Wrapper","_assertThisInitialized","self","ReferenceError","_possibleConstructorReturn","_createSuper","Derived","hasNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","_slicedToArray","arr","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","_toConsumableArray","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","Array","isArray","_arrayLikeToArray","iter","Symbol","iterator","from","_arr","_n","_d","_e","_i","_s","next","done","err","minLen","n","slice","name","test","len","arr2","ResolverError","_Error","_super","type","errorNode","values","_this","concat","getResolveError","errorType","Error","checkArgs","node","minArgs","maxArgs","getUnit","x","units","getUnitless","isSameUnit","b","every","isEmptyUnit","combineUnits","mapper","mapUnit","_Object$entries","entries","_Object$entries$_i","_key","_value","newValue","_i2","_Object$entries2","_Object$entries2$_i","_key2","_value2","valueWrap","mapMatrix","m","map","row","throwUnknownType","typed","getMessage","negate","castValue","cell","plus","aTree","bTree","handleCases","aDimensions","bDimensions","rowIdx","cellIdx","minus","multiply","multiplyVectors","unit1","unit2","matrixProduct","scalarProduct","aLength","bLength","sum","reduce","current","vectorProduct","aRow","bCol","innerCell","colIdx","multiplyImplicit","multiplyDot","multiplyCross","divide","some","factor1","factor2","power","factor","Math","pow","numberNumber","numberMatrix","matrixNumber","matrixMatrix","operator","resolve","options","resolveNode","error","parseFloat","resolveVariable","child","resolveFunction","unit","unitlessValue","variables","functions","createResolverFunction","argNames","expression","expressionOptions","argOptions","idx","defaultSimplifiableUnits","format","equation","isUnitTree","wrapError","unitResult","isUnitResult","resultToEquationWithUnit","diffUnits","wrapUnit","resultToEquation","unitToEquation","simplifyNumber","guessUnit","Infinity","log10","abs","formatNumber","exponent","floor","significand","digits","commaSep","ensurePrecision","split","join","log","LOG10E","round","Number","toPrecision","unitTree","_ref","_ref$simplifiableUnit","simplifiableUnits","_ref$variables","find","u","variable","getExponent","positive","negative","multiplyList","list","isInteger","createNumberFunction","func","validate","resolvedArgs","arg","nonNumber","findIndex","numberArgs","defaultFunctions","sin","cos","tan","asin","acos","atan","atan2","ceil","precision","max","min","sqrt","root","f","sign","ln","base","_node$args","startTree","endTree","variableType","start","end","enhancedOptions","defaultVariables","E","PI","unitWrap","kg","s","K","mol","cd","A","bit"],"mappings":"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","sourcesContent":["function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nvar ResolverError = /*#__PURE__*/function (_Error) {\n  _inherits(ResolverError, _Error);\n\n  var _super = _createSuper(ResolverError);\n\n  function ResolverError(type, errorNode, values) {\n    var _this;\n\n    _classCallCheck(this, ResolverError);\n\n    _this = _super.call(this, \"Internal \".concat(type, \" parse error\"));\n\n    _defineProperty(_assertThisInitialized(_this), \"type\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"errorNode\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"values\", void 0);\n\n    _this.type = type;\n    _this.errorNode = errorNode;\n    _this.values = values;\n    return _this;\n  }\n\n  _createClass(ResolverError, [{\n    key: \"getResolveError\",\n    value: function getResolveError() {\n      return _objectSpread2({\n        type: 'resolve-error',\n        errorType: this.type,\n        errorNode: this.errorNode\n      }, this.values);\n    }\n  }]);\n\n  return ResolverError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar checkArgs = function checkArgs(node, minArgs, maxArgs) {\n  if (node.args.length < minArgs || node.args.length > maxArgs) {\n    throw new ResolverError('functionArgLength', node, {\n      name: node.name,\n      minArgs: minArgs,\n      maxArgs: maxArgs\n    });\n  }\n};\n\nfunction getUnit(x) {\n  if (x.type === 'unit') {\n    return x.units;\n  } else {\n    return {};\n  }\n}\nfunction getUnitless(x) {\n  if (x.type === 'unit') {\n    return x.value;\n  } else {\n    return x;\n  }\n}\nfunction isSameUnit(a, b) {\n  var keys = Object.keys(a);\n  return keys.length === Object.keys(b).length && keys.every(function (key) {\n    return a[key] === b[key];\n  });\n}\nfunction isEmptyUnit(x) {\n  return Object.keys(x).length === 0;\n}\nfunction combineUnits(a, b, mapper) {\n  // Get all units from a\n  var result = mapUnit(a, function (value, key) {\n    return mapper(value, b[key] || 0, key);\n  }); // Get remaining units from b\n\n  for (var _i = 0, _Object$entries = Object.entries(b); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n        _key = _Object$entries$_i[0],\n        _value = _Object$entries$_i[1];\n\n    if (_key in a) {\n      continue;\n    }\n\n    var newValue = mapper(0, _value, _key);\n\n    if (newValue !== 0) {\n      result[_key] = newValue;\n    }\n  }\n\n  return result;\n}\nfunction mapUnit(x, mapper) {\n  var result = {};\n\n  for (var _i2 = 0, _Object$entries2 = Object.entries(x); _i2 < _Object$entries2.length; _i2++) {\n    var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),\n        _key2 = _Object$entries2$_i[0],\n        _value2 = _Object$entries2$_i[1];\n\n    var newValue = mapper(_value2, _key2);\n\n    if (newValue !== 0) {\n      result[_key2] = newValue;\n    }\n  }\n\n  return result;\n}\n\nvar valueWrap = function valueWrap(x) {\n  return {\n    type: 'number',\n    value: x\n  };\n};\n\nvar mapMatrix = function mapMatrix(result, mapper) {\n  return {\n    type: 'matrix',\n    m: result.m,\n    n: result.n,\n    values: result.values.map(function (row) {\n      return row.map(mapper);\n    })\n  };\n};\n\n/**\n * Compiler-error and runtime-error on unhandled type\n *\n * @param typed: Object with type-property\n * @param getMessage: get an error message for runtime errors\n */\nfunction throwUnknownType(typed, getMessage) {\n  throw new Error(getMessage(typed && typed.type || 'unknown'));\n}\n\n// don't narrow from control-flow (ie. T remains ResultNode in switch)\n\nvar negate = function negate(value) {\n  var castValue = value;\n\n  switch (castValue.type) {\n    case 'number':\n      return valueWrap(-castValue.value);\n\n    case 'matrix':\n      return mapMatrix(castValue, function (cell) {\n        return negate(cell);\n      });\n\n    case 'unit':\n      return {\n        type: 'unit',\n        units: _objectSpread2({}, castValue.units),\n        value: negate(castValue.value)\n      };\n\n    default:\n      return throwUnknownType(castValue, function (type) {\n        return \"Equation resolve: cannot resolve type \\\"\".concat(type, \"\\\"\");\n      });\n  }\n};\n\nfunction plus(node, aTree, bTree) {\n  return handleCases(node, aTree, bTree, function (a, b) {\n    if (!isSameUnit(a, b)) {\n      throw new ResolverError('plusDifferentUnits', node, {});\n    }\n\n    return a;\n  }, // number, number\n  function (a, b) {\n    return valueWrap(a.value + b.value);\n  }, // number, matrix\n  function (a, b) {\n    return mapMatrix(b, function (cell) {\n      return plus(node, a, cell);\n    });\n  }, // matrix, number\n  function (a, b) {\n    return mapMatrix(a, function (cell) {\n      return plus(node, cell, b);\n    });\n  }, // matrix, matrix\n  function (a, b) {\n    if (a.n !== b.n || a.m !== b.m) {\n      throw new ResolverError('plusMatrixMismatch', node, {\n        aDimensions: \"\".concat(a.m, \"x\").concat(a.n),\n        bDimensions: \"\".concat(b.m, \"x\").concat(b.n)\n      });\n    }\n\n    return {\n      type: 'matrix',\n      m: a.m,\n      n: a.n,\n      values: a.values.map(function (row, rowIdx) {\n        return row.map(function (cell, cellIdx) {\n          return plus(node, cell, b.values[rowIdx][cellIdx]);\n        });\n      })\n    };\n  });\n}\nfunction minus(node, a, b) {\n  return plus(node, a, negate(b));\n} // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nfunction multiply(node, aTree, bTree, multiplyVectors) {\n  return handleCases(node, aTree, bTree, function (a, b) {\n    return combineUnits(a, b, function (unit1, unit2) {\n      return unit1 + unit2;\n    });\n  }, // number, number\n  function (a, b) {\n    return valueWrap(a.value * b.value);\n  }, // number, matrix\n  function (a, b) {\n    return mapMatrix(b, function (cell) {\n      return multiply(node, a, cell, multiplyVectors);\n    });\n  }, // matrix, number\n  function (a, b) {\n    return mapMatrix(a, function (cell) {\n      return multiply(node, cell, b, multiplyVectors);\n    });\n  }, // matrix, matrix\n  function (a, b) {\n    if (a.n === 1 && b.n === 1) {\n      return multiplyVectors(node, a, b);\n    } else {\n      return matrixProduct(node, a, b);\n    }\n  });\n}\n\nfunction scalarProduct(node, a, b) {\n  if (a.m !== b.m) {\n    throw new ResolverError('scalarProductUnbalanced', node, {\n      aLength: a.m,\n      bLength: b.m\n    });\n  }\n\n  var sum = a.values.reduce(function (current, row, rowIdx) {\n    return current + row[0].value * b.values[rowIdx][0].value;\n  }, 0);\n  return valueWrap(sum);\n}\n\nfunction vectorProduct(node, a, b) {\n  if (a.m !== 3 || b.m !== 3) {\n    throw new ResolverError('vectorProduct3VectorOnly', node, {});\n  }\n\n  return {\n    type: 'matrix',\n    n: 1,\n    m: 3,\n    values: [[valueWrap(a.values[1][0].value * b.values[2][0].value - a.values[2][0].value * b.values[1][0].value)], [valueWrap(a.values[2][0].value * b.values[0][0].value - a.values[0][0].value * b.values[2][0].value)], [valueWrap(a.values[0][0].value * b.values[1][0].value - a.values[1][0].value * b.values[0][0].value)]]\n  };\n}\n\nfunction matrixProduct(node, a, b) {\n  if (a.n !== b.m) {\n    throw new ResolverError('matrixProductMatrixMismatch', node, {\n      aDimensions: \"\".concat(a.m, \"x\").concat(a.n),\n      bDimensions: \"\".concat(b.m, \"x\").concat(b.n)\n    });\n  }\n\n  return {\n    type: 'matrix',\n    m: a.m,\n    n: b.n,\n    values: a.values.map(function (row, aRow) {\n      return b.values[0].map(function (cell, bCol) {\n        return valueWrap(a.values[aRow].reduce(function (current, innerCell, colIdx) {\n          return current + innerCell.value * b.values[colIdx][bCol].value;\n        }, 0));\n      });\n    })\n  };\n}\n\nfunction multiplyImplicit(node, a, b) {\n  if (a.type === 'matrix' && b.type === 'matrix' && a.n === 1 && b.n === 1) {\n    throw new ResolverError('multiplyImplicitNoVectors', node, {});\n  }\n\n  return multiply(node, a, b, scalarProduct);\n}\nfunction multiplyDot(node, a, b) {\n  return multiply(node, a, b, scalarProduct);\n}\nfunction multiplyCross(node, a, b) {\n  return multiply(node, a, b, vectorProduct);\n}\nfunction divide(node, aTree, bTree) {\n  if (aTree.type === 'matrix' && bTree.type === 'matrix') {\n    throw new ResolverError('divideMatrixMatrix', node, {});\n  }\n\n  if (bTree.type === 'number' && bTree.value === 0) {\n    throw new ResolverError('divideNotZero', node, {});\n  }\n\n  if (bTree.type === 'matrix' && bTree.values.some(function (row) {\n    return row.some(function (cell) {\n      return cell.value === 0;\n    });\n  })) {\n    throw new ResolverError('divideNotZero', node, {});\n  }\n\n  return handleCases(node, aTree, bTree, function (a, b) {\n    return combineUnits(a, b, function (factor1, factor2) {\n      return factor1 - factor2;\n    });\n  }, // number, number\n  function (a, b) {\n    return valueWrap(a.value / b.value);\n  }, // number, matrix\n  function (a, b) {\n    return mapMatrix(b, function (cell) {\n      return divide(node, a, cell);\n    });\n  }, // matrix, number\n  function (a, b) {\n    return mapMatrix(a, function (cell) {\n      return divide(node, cell, b);\n    });\n  }, // matrix, matrix\n  null);\n}\nfunction power(node, aTree, bTree) {\n  if (bTree.type !== 'number') {\n    throw new ResolverError('powerUnitlessNumberExponent', node, {});\n  }\n\n  return handleCases(node, aTree, bTree, function (a) {\n    return mapUnit(a, function (factor) {\n      return factor * bTree.value;\n    });\n  }, // number, number\n  function (a, b) {\n    return valueWrap(Math.pow(a.value, b.value));\n  }, // number, matrix\n  null, // matrix, number\n  function (a, b) {\n    return mapMatrix(a, function (cell) {\n      return valueWrap(Math.pow(cell.value, b.value));\n    });\n  }, // matrix, matrix\n  null);\n}\n\nfunction handleCases(node, a, b, combineUnits, numberNumber, numberMatrix, matrixNumber, matrixMatrix) {\n  if (a.type === 'unit' || b.type === 'unit') {\n    var units = combineUnits(getUnit(a), getUnit(b));\n    var result = handleCases(node, getUnitless(a), getUnitless(b), combineUnits, numberNumber, numberMatrix, matrixNumber, matrixMatrix);\n\n    if (isEmptyUnit(units)) {\n      return result;\n    } else {\n      return {\n        type: 'unit',\n        units: units,\n        value: result\n      };\n    }\n  }\n\n  switch (a.type) {\n    case 'number':\n      switch (b.type) {\n        case 'number':\n          if (numberNumber) {\n            return numberNumber(a, b);\n          }\n\n          break;\n\n        case 'matrix':\n          if (numberMatrix) {\n            return numberMatrix(a, b);\n          }\n\n          break;\n      }\n\n      break;\n\n    case 'matrix':\n      {\n        switch (b.type) {\n          case 'number':\n            if (matrixNumber) {\n              return matrixNumber(a, b);\n            }\n\n            break;\n\n          case 'matrix':\n            if (matrixMatrix) {\n              return matrixMatrix(a, b);\n            }\n\n            break;\n        }\n\n        break;\n      }\n  }\n\n  throw new ResolverError('operatorInvalidArguments', node, {\n    operator: node.type,\n    a: a.type,\n    b: b.type\n  });\n}\n\nvar resolve = function resolve(node) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (node.type === 'parser-error') {\n    return {\n      type: 'resolve-error',\n      errorType: 'invalidEquation',\n      errorNode: null\n    };\n  }\n\n  try {\n    return resolveNode(node, options);\n  } catch (error) {\n    if (error instanceof ResolverError) {\n      return error.getResolveError();\n    } else {\n      throw error;\n    }\n  }\n};\nvar resolveNode = function resolveNode(node, options) {\n  switch (node.type) {\n    case 'number':\n      return {\n        type: 'number',\n        value: parseFloat(node.value)\n      };\n\n    case 'variable':\n      return resolveVariable(node, options);\n\n    case 'positive':\n      return resolveNode(node.value, options);\n\n    case 'negative':\n      return negate(resolveNode(node.value, options));\n\n    case 'positive-negative':\n      throw new ResolverError('plusminusUnhandled', node, {});\n\n    case 'block':\n      return resolveNode(node.child, options);\n\n    case 'plus':\n      return plus(node, resolveNode(node.a, options), resolveNode(node.b, options));\n\n    case 'minus':\n      return minus(node, resolveNode(node.a, options), resolveNode(node.b, options));\n\n    case 'plus-minus':\n      throw new ResolverError('plusminusUnhandled', node, {});\n\n    case 'multiply-implicit':\n      return multiplyImplicit(node, resolveNode(node.a, options), resolveNode(node.b, options));\n\n    case 'multiply-dot':\n      return multiplyDot(node, resolveNode(node.a, options), resolveNode(node.b, options));\n\n    case 'multiply-cross':\n      return multiplyCross(node, resolveNode(node.a, options), resolveNode(node.b, options));\n\n    case 'divide-fraction':\n    case 'divide-inline':\n      return divide(node, resolveNode(node.a, options), resolveNode(node.b, options));\n\n    case 'power':\n      return power(node, resolveNode(node.a, options), resolveNode(node.b, options));\n\n    case 'function':\n      return resolveFunction(node, options);\n\n    case 'equals':\n    case 'less-than':\n    case 'less-than-equals':\n    case 'greater-than':\n    case 'greater-than-equals':\n    case 'approximates':\n      throw new ResolverError('noComparison', node, {});\n\n    case 'matrix':\n      {\n        // Keep track of resolved unit\n        var unit = null;\n        var values = node.values.map(function (row) {\n          return row.map(function (cell) {\n            var value = resolveNode(cell, options); // Compare units\n\n            if (unit) {\n              if (!isSameUnit(unit, getUnit(value))) {\n                throw new ResolverError('matrixDifferentUnits', node, {});\n              }\n            } else {\n              unit = getUnit(value);\n            } // Ensure all children are unitless numbers\n\n\n            var unitlessValue = getUnitless(value);\n\n            if (unitlessValue.type !== 'number') {\n              throw new ResolverError('matrixNoNesting', node, {});\n            }\n\n            return unitlessValue;\n          });\n        }); // Wrap in unit if necessary\n\n        if (!unit || isEmptyUnit(unit)) {\n          return {\n            type: 'matrix',\n            m: node.m,\n            n: node.n,\n            values: values\n          };\n        } else {\n          return {\n            type: 'unit',\n            units: unit,\n            value: {\n              type: 'matrix',\n              m: node.m,\n              n: node.n,\n              values: values\n            }\n          };\n        }\n      }\n\n    case 'function-placeholder':\n    case 'operand-placeholder':\n    case 'operator-placeholder':\n    case 'operator-unary-placeholder':\n      throw new ResolverError('placeholder', node, {});\n\n    default:\n      return throwUnknownType(node, function (type) {\n        return \"Equation resolve: cannot resolve type \\\"\".concat(type, \"\\\"\");\n      });\n  }\n};\n\nfunction resolveVariable(node, options) {\n  if (!options.variables || !options.variables[node.name]) {\n    throw new ResolverError('variableUnknown', node, {\n      name: node.name\n    });\n  }\n\n  return options.variables[node.name];\n}\n\nfunction resolveFunction(node, options) {\n  if (!options.functions || !options.functions[node.name]) {\n    throw new ResolverError('functionUnknown', node, {\n      name: node.name\n    });\n  }\n\n  return options.functions[node.name](node, options);\n}\n\nvar createResolverFunction = function createResolverFunction(argNames, expression, options) {\n  var expressionOptions = {\n    variables: _objectSpread2({}, options.variables),\n    functions: _objectSpread2({}, options.functions)\n  };\n  return function (node, argOptions) {\n    checkArgs(node, argNames.length, argNames.length);\n    argNames.forEach(function (n, idx) {\n      expressionOptions.variables[n] = resolveNode(node.args[idx], argOptions);\n    });\n    return resolveNode(expression, expressionOptions);\n  };\n};\n\nvar defaultSimplifiableUnits = ['N', 'J', 'W', 'Pa', 'Hz', 'lx', 'C', 'V', 'F', 'Ω', 'S', 'Wb', 'T', 'H', 'Gy'];\nvar format = function format(equation) {\n  var unit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (equation.type === 'parser-error') {\n    return equation;\n  }\n\n  if (unit && unit.type === 'parser-error') {\n    return unit;\n  }\n\n  if (unit && !isUnitTree(unit)) {\n    return {\n      type: 'resolve-error',\n      errorType: 'invalidUnit',\n      node: wrapError(equation, unit),\n      errorNode: unit\n    };\n  }\n\n  var result = resolve(equation, options);\n  var unitResult = unit ? resolve(unit, options) : null;\n\n  if (result.type === 'resolve-error') {\n    return _objectSpread2(_objectSpread2({}, result), {}, {\n      node: wrapError(equation, unit)\n    });\n  }\n\n  if (unitResult && unitResult.type === 'resolve-error') {\n    return _objectSpread2(_objectSpread2({}, unitResult), {}, {\n      node: wrapError(equation, unit)\n    });\n  }\n\n  if (unitResult && !isUnitResult(unitResult)) {\n    return {\n      type: 'resolve-error',\n      errorType: 'invalidUnit',\n      node: wrapError(equation, unit),\n      errorNode: unit\n    };\n  }\n\n  return {\n    type: 'equals',\n    a: equation,\n    b: resultToEquationWithUnit(result, unit, unitResult, options)\n  };\n};\n\nvar wrapError = function wrapError(equation, unit) {\n  return {\n    type: 'equals',\n    a: equation,\n    b: unit ? {\n      type: 'multiply-implicit',\n      a: {\n        type: 'operand-placeholder'\n      },\n      b: unit\n    } : {\n      type: 'operand-placeholder'\n    }\n  };\n};\n\nfunction resultToEquationWithUnit(result, unit, unitResult, options) {\n  if (unit && unitResult) {\n    var value = divide(unit, getUnitless(result), getUnitless(unitResult));\n    var diffUnits = combineUnits(getUnit(result), getUnit(unitResult), function (a, b) {\n      return a - b;\n    });\n\n    if (isEmptyUnit(diffUnits)) {\n      return wrapUnit(resultToEquation(value, options), unit);\n    } else {\n      return wrapUnit(resultToEquation(value, options), {\n        type: 'multiply-implicit',\n        a: unit,\n        b: unitToEquation(diffUnits)\n      });\n    }\n  } else {\n    return resultToEquation(result, options);\n  }\n}\n\nfunction resultToEquation(result, options) {\n  switch (result.type) {\n    case 'number':\n      if (result.value < 0) {\n        return {\n          type: 'negative',\n          value: simplifyNumber(-result.value)\n        };\n      } else {\n        return simplifyNumber(result.value);\n      }\n\n    case 'matrix':\n      return {\n        type: 'matrix',\n        m: result.m,\n        n: result.n,\n        values: result.values.map(function (row) {\n          return row.map(function (cell) {\n            return resultToEquation(cell, options);\n          });\n        })\n      };\n\n    case 'unit':\n      {\n        var unit = guessUnit(result, options);\n        return wrapUnit(resultToEquation(unit.value, options), unitToEquation(unit.units));\n      }\n  }\n}\n\nfunction simplifyNumber(value) {\n  // Handle infinity\n  if (value === Infinity) {\n    return {\n      type: 'variable',\n      name: '∞'\n    };\n  } // Float exponent\n\n\n  var factor = Math.log10(value);\n\n  if (value === 0 || Math.abs(factor) < 5) {\n    // Retain regular number\n    return {\n      type: 'number',\n      value: formatNumber(value)\n    };\n  } else {\n    // Rewrite as power-of-ten\n    var exponent = Math.floor(factor);\n    var significand = value / Math.pow(10, exponent);\n    return {\n      type: 'multiply-dot',\n      a: {\n        type: 'number',\n        value: formatNumber(significand)\n      },\n      b: {\n        type: 'power',\n        a: {\n          type: 'number',\n          value: '10'\n        },\n        b: {\n          type: 'number',\n          value: formatNumber(exponent)\n        }\n      }\n    };\n  }\n}\n\nfunction formatNumber(value) {\n  var digits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n  var commaSep = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '.';\n  return ensurePrecision(value, digits).split('.').join(commaSep);\n} // number.toPrecision with trailing zeros stripped\n// Avoids scientific notation for large numbers\n\n\nfunction ensurePrecision(value, digits) {\n  // Handle cases where scientific notation would be used\n  if (Math.log(Math.abs(value)) * Math.LOG10E >= digits) {\n    return Math.round(value).toString();\n  } // Strip trailing zeroes\n\n\n  return Number(value.toPrecision(digits)).toString();\n}\n\nfunction isUnitTree(unitTree) {\n  switch (unitTree.type) {\n    case 'multiply-implicit':\n    case 'multiply-dot':\n    case 'multiply-cross':\n    case 'divide-fraction':\n    case 'divide-inline':\n      return isUnitTree(unitTree.a) && isUnitTree(unitTree.b);\n\n    case 'power':\n      return unitTree.a.type === 'variable' && unitTree.b.type === 'number';\n\n    case 'variable':\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nfunction isUnitResult(unitResult) {\n  switch (unitResult.type) {\n    case 'unit':\n      return isUnitResult(unitResult.value);\n\n    case 'number':\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nfunction wrapUnit(value, units) {\n  // Retain proper ordering of operations be letting negative wrap multiplication\n  if (value.type === 'negative') {\n    return {\n      type: 'negative',\n      value: {\n        type: 'multiply-implicit',\n        a: value.value,\n        b: units\n      }\n    };\n  } else {\n    return {\n      type: 'multiply-implicit',\n      a: value,\n      b: units\n    };\n  }\n}\n\nfunction guessUnit(result, _ref) {\n  var _ref$simplifiableUnit = _ref.simplifiableUnits,\n      simplifiableUnits = _ref$simplifiableUnit === void 0 ? defaultSimplifiableUnits : _ref$simplifiableUnit,\n      _ref$variables = _ref.variables,\n      variables = _ref$variables === void 0 ? {} : _ref$variables;\n  var unit = simplifiableUnits.find(function (u) {\n    var variable = variables[u];\n    return variable && variable.type === 'unit' && variable.value.type === 'number' && isSameUnit(variable.units, result.units);\n  });\n\n  if (unit) {\n    var variable = variables[unit];\n    return {\n      type: 'unit',\n      units: _defineProperty({}, unit, 1),\n      value: divide({}, result.value, variable.value)\n    };\n  } else {\n    return result;\n  }\n}\n\nfunction getExponent(unit, factor) {\n  if (factor === 1) {\n    return {\n      type: 'variable',\n      name: unit\n    };\n  } else {\n    return {\n      type: 'power',\n      a: {\n        type: 'variable',\n        name: unit\n      },\n      b: {\n        type: 'number',\n        value: factor.toString()\n      }\n    };\n  }\n}\n\nfunction unitToEquation(units) {\n  // Terms above fraction\n  var positive = []; // Terms below fraction\n\n  var negative = [];\n\n  for (var _i = 0, _Object$entries = Object.entries(units); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n        unit = _Object$entries$_i[0],\n        factor = _Object$entries$_i[1];\n\n    if (factor > 0) {\n      positive.push(getExponent(unit, factor));\n    } else {\n      negative.push(getExponent(unit, -factor));\n    }\n  }\n\n  if (negative.length === 0) {\n    return multiplyList(positive);\n  }\n\n  return {\n    type: 'divide-fraction',\n    a: multiplyList(positive),\n    b: multiplyList(negative)\n  };\n}\n\nfunction multiplyList(list) {\n  if (list.length === 0) {\n    return {\n      type: 'number',\n      value: '1'\n    };\n  }\n\n  var current = list[0]; // Build multiplication tree\n\n  for (var i = 1; i < list.length; i++) {\n    current = {\n      type: 'multiply-implicit',\n      a: current,\n      b: list[i]\n    };\n  }\n\n  return current;\n}\n\nvar isInteger = function isInteger(x) {\n  return x.type === 'number' && Math.round(x.value) === x.value;\n};\n\nvar createNumberFunction = function createNumberFunction(func) {\n  var minArgs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var maxArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : minArgs;\n  var validate = arguments.length > 3 ? arguments[3] : undefined;\n  return function (node, options) {\n    checkArgs(node, minArgs, maxArgs);\n    var resolvedArgs = node.args.map(function (arg) {\n      return resolveNode(arg, options);\n    });\n    var nonNumber = resolvedArgs.findIndex(function (arg) {\n      return arg.type !== 'number';\n    });\n\n    if (nonNumber !== -1) {\n      throw new ResolverError('functionNumberOnly', node.args[nonNumber], {\n        name: node.name\n      });\n    }\n\n    var numberArgs = resolvedArgs.map(function (arg) {\n      return arg.value;\n    });\n\n    if (validate) {\n      var result = validate.apply(void 0, [node.name].concat(_toConsumableArray(numberArgs)));\n\n      if (result) {\n        throw new ResolverError(result[1], node.args[result[0]], {\n          name: node.name\n        });\n      }\n    }\n\n    return valueWrap(func.apply(void 0, _toConsumableArray(numberArgs)));\n  };\n};\n\nvar defaultFunctions = {\n  sin: createNumberFunction(Math.sin),\n  cos: createNumberFunction(Math.cos),\n  tan: createNumberFunction(Math.tan),\n  asin: createNumberFunction(Math.asin),\n  acos: createNumberFunction(Math.acos),\n  atan: createNumberFunction(Math.atan),\n  atan2: createNumberFunction(Math.atan2, 2),\n  abs: createNumberFunction(Math.abs),\n  ceil: createNumberFunction(Math.ceil),\n  floor: createNumberFunction(Math.floor),\n  round: createNumberFunction(function (x) {\n    var precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var factor = Math.pow(10, precision);\n    return Math.round(x * factor) / factor;\n  }, 1, 2),\n  max: createNumberFunction(Math.max, 1, Infinity),\n  min: createNumberFunction(Math.min, 1, Infinity),\n  pow: createNumberFunction(Math.pow, 2),\n  sqrt: createNumberFunction(Math.sqrt, 1, 1, function (name, x) {\n    if (x < 0) {\n      return [0, 'functionSqrt1Positive'];\n    }\n  }),\n  root: createNumberFunction(function (f, x) {\n    return Math.sign(x) * Math.pow(Math.abs(x), 1 / f);\n  }, 2, 2, function (name, f, x) {\n    if (Math.round(f) !== f || f <= 0) {\n      return [0, 'functionRoot1PositiveInteger'];\n    }\n\n    if (f % 2 === 0 && x < 0) {\n      return [1, 'functionRoot2Positive'];\n    }\n  }),\n  ln: createNumberFunction(Math.log),\n  log: createNumberFunction(function (x) {\n    var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n    return Math.log(x) / Math.log(base);\n  }, 1, 2),\n  sum: function sum(node, options) {\n    checkArgs(node, 4, 4);\n\n    var _node$args = _slicedToArray(node.args, 4),\n        variable = _node$args[0],\n        startTree = _node$args[1],\n        endTree = _node$args[2],\n        expression = _node$args[3];\n\n    if (variable.type !== 'variable') {\n      throw new ResolverError('functionSum1Variable', variable, {\n        name: node.name,\n        variableType: variable.type\n      });\n    }\n\n    var start = resolveNode(startTree, options);\n    var end = resolveNode(endTree, options);\n\n    if (!isInteger(start)) {\n      throw new ResolverError('functionSum2Integer', startTree, {\n        name: node.name\n      });\n    }\n\n    if (!isInteger(end)) {\n      throw new ResolverError('functionSum3Integer', endTree, {\n        name: node.name\n      });\n    }\n\n    if (start > end) {\n      var _ref = [end, start];\n      start = _ref[0];\n      end = _ref[1];\n    }\n\n    var enhancedOptions = {\n      functions: options.functions,\n      variables: _objectSpread2({}, options.variables)\n    }; // Get initial value\n\n    enhancedOptions.variables[variable.name] = start;\n    var sum = resolveNode(expression, enhancedOptions);\n\n    for (var i = start.value + 1; i <= end.value; i++) {\n      enhancedOptions.variables[variable.name] = valueWrap(i);\n      sum = plus(node, sum, resolveNode(expression, enhancedOptions));\n    }\n\n    return sum;\n  }\n};\n\nvar defaultVariables = {\n  // ========================================================================\n  // Mathematical constants\n  // ========================================================================\n  'e': valueWrap(Math.E),\n  'pi': valueWrap(Math.PI),\n  'π': valueWrap(Math.PI),\n  'phi': valueWrap(1.618033988749895),\n  'φ': valueWrap(1.618033988749895),\n  // ========================================================================\n  // Length\n  // ========================================================================\n  // SI ---------------------------------------------------------------------\n  'pm': unitWrap(1e-12, {\n    m: 1\n  }),\n  // picometer\n  'nm': unitWrap(1e-9, {\n    m: 1\n  }),\n  // nanometer\n  'μm': unitWrap(1e-6, {\n    m: 1\n  }),\n  // micrometer\n  'mm': unitWrap(1e-3, {\n    m: 1\n  }),\n  // millimeter\n  'cm': unitWrap(1e-2, {\n    m: 1\n  }),\n  // centimeter\n  'dm': unitWrap(1e-1, {\n    m: 1\n  }),\n  // decimeter\n  'm': unitWrap(1e0, {\n    m: 1\n  }),\n  // meter (base unit)\n  'km': unitWrap(1e3, {\n    m: 1\n  }),\n  // kilometer\n  'Mm': unitWrap(1e6, {\n    m: 1\n  }),\n  // megameter\n  'Gm': unitWrap(1e9, {\n    m: 1\n  }),\n  // gigameter\n  // Imperial ---------------------------------------------------------------\n  'thou': unitWrap(2.54e-7, {\n    m: 1\n  }),\n  // thou, 1/1000 inch\n  'mil': unitWrap(2.54e-7, {\n    m: 1\n  }),\n  // mil, 1/1000 inch\n  'in': unitWrap(2.54e-2, {\n    m: 1\n  }),\n  // inch\n  '\"': unitWrap(2.54e-2, {\n    m: 1\n  }),\n  // inch, \" symbol\n  'ft': unitWrap(0.3048, {\n    m: 1\n  }),\n  // foot\n  '\\'': unitWrap(0.3048, {\n    m: 1\n  }),\n  // foot, ' symbol\n  'yd': unitWrap(0.9144, {\n    m: 1\n  }),\n  // yard\n  'mi': unitWrap(1609.344, {\n    m: 1\n  }),\n  // mile\n  // Others -----------------------------------------------------------------\n  'NM': unitWrap(1852, {\n    m: 1\n  }),\n  // natical mile\n  'nmi': unitWrap(1852, {\n    m: 1\n  }),\n  // natical mile\n  'Å': unitWrap(1e-10, {\n    m: 1\n  }),\n  // ångström\n  'AU': unitWrap(1.4959787e11, {\n    m: 1\n  }),\n  // astronomical unit\n  'pc': unitWrap(3.0856776e16, {\n    m: 1\n  }),\n  // parsec\n  'ls': unitWrap(2.99792458e8, {\n    m: 1\n  }),\n  // light-second\n  'ly': unitWrap(9.46073047e15, {\n    m: 1\n  }),\n  // light-year\n  'Kly': unitWrap(9.46073047e18, {\n    m: 1\n  }),\n  // kilolight-year\n  'Mly': unitWrap(9.46073047e21, {\n    m: 1\n  }),\n  // megalight-year\n  'Gly': unitWrap(9.46073047e24, {\n    m: 1\n  }),\n  // gigalight-year\n  // ========================================================================\n  // Area\n  // ========================================================================\n  // Imperial ---------------------------------------------------------------\n  'ac': unitWrap(4046.856, {\n    m: 2\n  }),\n  // acre (international)\n  // Others -----------------------------------------------------------------\n  'ha': unitWrap(1e4, {\n    m: 2\n  }),\n  // hectare\n  'b': unitWrap(1e-28, {\n    m: 2\n  }),\n  // barn (physics)\n  // ========================================================================\n  // Volume\n  // ========================================================================\n  // SI ---------------------------------------------------------------------\n  'μL': unitWrap(1e-9, {\n    m: 3\n  }),\n  // microliter\n  'mL': unitWrap(1e-6, {\n    m: 3\n  }),\n  // milliliter\n  'cL': unitWrap(1e-5, {\n    m: 3\n  }),\n  // centiliter\n  'dL': unitWrap(1e-4, {\n    m: 3\n  }),\n  // deciliter\n  'L': unitWrap(1e-3, {\n    m: 3\n  }),\n  // liter\n  // Imperial ---------------------------------------------------------------\n  'pt': unitWrap(5.68e-4, {\n    m: 3\n  }),\n  // pint (imperial)\n  'qt': unitWrap(1.13652e-3, {\n    m: 3\n  }),\n  // quart (imperial)\n  'gal': unitWrap(4.54609e-3, {\n    m: 3\n  }),\n  // gallon (imperial)\n  'pt_l': unitWrap(4.73e-4, {\n    m: 3\n  }),\n  // pint (US liquid)\n  'qt_l': unitWrap(9.46e-4, {\n    m: 3\n  }),\n  // quart (US liquid)\n  'gal_l': unitWrap(3.785e-3, {\n    m: 3\n  }),\n  // gallon (US liquid)\n  'pt_d': unitWrap(5.51e-4, {\n    m: 3\n  }),\n  // pint (US dry)\n  'qt_d': unitWrap(1.101e-3, {\n    m: 3\n  }),\n  // quart (US dry)\n  'gal_d': unitWrap(4.405e-3, {\n    m: 3\n  }),\n  // gallon (US dry)\n  // ========================================================================\n  // Mass\n  // ========================================================================\n  // SI ---------------------------------------------------------------------\n  'ng': unitWrap(1e-12, {\n    kg: 1\n  }),\n  // nanogram\n  'μg': unitWrap(1e-9, {\n    kg: 1\n  }),\n  // microgram\n  'mg': unitWrap(1e-6, {\n    kg: 1\n  }),\n  // milligram\n  'g': unitWrap(1e-3, {\n    kg: 1\n  }),\n  // gram\n  'kg': unitWrap(1e0, {\n    kg: 1\n  }),\n  // kilogram (base unit)\n  'Mg': unitWrap(1e3, {\n    kg: 1\n  }),\n  // megagram\n  'Gg': unitWrap(1e6, {\n    kg: 1\n  }),\n  // gigagram\n  't': unitWrap(1e3, {\n    kg: 1\n  }),\n  // tonne (metric ton)\n  'u': unitWrap(1.660539e-27, {\n    kg: 1\n  }),\n  // unified atomic mass unit\n  'Da': unitWrap(1.660539e-27, {\n    kg: 1\n  }),\n  // dalton\n  // Imperial ---------------------------------------------------------------\n  'oz': unitWrap(2.83495e-3, {\n    kg: 1\n  }),\n  // ounce\n  'lb': unitWrap(0.453592, {\n    kg: 1\n  }),\n  // pound\n  'st': unitWrap(6.350293, {\n    kg: 1\n  }),\n  // stone\n  'ton': unitWrap(1.0160e3, {\n    kg: 1\n  }),\n  // ton\n  // ========================================================================\n  // Time\n  // ========================================================================\n  // SI ---------------------------------------------------------------------\n  'as': unitWrap(1e-18, {\n    s: 1\n  }),\n  // attosecond\n  'fs': unitWrap(1e-15, {\n    s: 1\n  }),\n  // femtosecond\n  'ps': unitWrap(1e-12, {\n    s: 1\n  }),\n  // picosecond\n  'ns': unitWrap(1e-9, {\n    s: 1\n  }),\n  // nanosecond\n  'μs': unitWrap(1e-6, {\n    s: 1\n  }),\n  // microsecond\n  'ms': unitWrap(1e-3, {\n    s: 1\n  }),\n  // millisecond\n  's': unitWrap(1e0, {\n    s: 1\n  }),\n  // second (base unit)\n  // Others -----------------------------------------------------------------\n  'min': unitWrap(60, {\n    s: 1\n  }),\n  // minute\n  'h': unitWrap(3600, {\n    s: 1\n  }),\n  // hour\n  'hr': unitWrap(3600, {\n    s: 1\n  }),\n  // hour\n  'd': unitWrap(86400, {\n    s: 1\n  }),\n  // day\n  'day': unitWrap(86400, {\n    s: 1\n  }),\n  // day\n  'y': unitWrap(31557600, {\n    s: 1\n  }),\n  // year (Julian, 365.25 days)\n  'yr': unitWrap(31557600, {\n    s: 1\n  }),\n  // year (Julian, 365.25 days)\n  // ========================================================================\n  // Frequency\n  // ========================================================================\n  'nHz': unitWrap(1e-9, {\n    s: -1\n  }),\n  // nanohertz\n  'μHz': unitWrap(1e-6, {\n    s: -1\n  }),\n  // microhertz\n  'mHz': unitWrap(1e-3, {\n    s: -1\n  }),\n  // millihertz\n  'Hz': unitWrap(1e0, {\n    s: -1\n  }),\n  // hertz\n  'kHz': unitWrap(1e3, {\n    s: -1\n  }),\n  // kilohertz\n  'MHz': unitWrap(1e6, {\n    s: -1\n  }),\n  // megahertz\n  'GHz': unitWrap(1e9, {\n    s: -1\n  }),\n  // gigahertz\n  'THz': unitWrap(1e12, {\n    s: -1\n  }),\n  // terahertz\n  'PHz': unitWrap(1e15, {\n    s: -1\n  }),\n  // petahertz\n  // ========================================================================\n  // Angle\n  // ========================================================================\n  'rad': valueWrap(1),\n  // radian\n  'sr': valueWrap(1),\n  // steradian\n  'deg': valueWrap(0.01745329252),\n  // degree\n  '°': valueWrap(0.01745329252),\n  // degree (symbol)\n  // ========================================================================\n  // Ratio\n  // ========================================================================\n  '%': valueWrap(0.01),\n  // percent\n  '‰': valueWrap(0.001),\n  // permille\n  // ========================================================================\n  // Temperature\n  // ========================================================================\n  'K': unitWrap(1, {\n    K: 1\n  }),\n  // Kelvin (base unit)\n  '°C': unitWrap(1, {\n    K: 1\n  }),\n  // degree Celcius\n  '°F': unitWrap(0.555556, {\n    K: 1\n  }),\n  // degree Fahrenheit\n  '°R': unitWrap(0.555556, {\n    K: 1\n  }),\n  // degree Rankine\n  // Offsets ----------------------------------------------------------------\n  '°C_0': unitWrap(273.15, {\n    K: 1\n  }),\n  // degree Celcius offset from absolute zero\n  '°F_0': unitWrap(255.372, {\n    K: 1\n  }),\n  // degree Fahrenheit offset from absolute zero\n  // ========================================================================\n  // Speed\n  // ========================================================================\n  'kph': unitWrap(0.27778, {\n    m: 1,\n    s: -1\n  }),\n  // kilometers per hour\n  'mph': unitWrap(0.44704, {\n    m: 1,\n    s: -1\n  }),\n  // miles per hour\n  'kn': unitWrap(0.514444, {\n    m: 1,\n    s: -1\n  }),\n  // knot, nautical mile per hour\n  'c': unitWrap(299792458, {\n    m: 1,\n    s: -1\n  }),\n  // Speed of light in vacuum\n  // ========================================================================\n  // Acceperation\n  // ========================================================================\n  'g_0': unitWrap(9.80665, {\n    m: 1,\n    s: -2\n  }),\n  // gravity of Earth\n  // ========================================================================\n  // Force\n  // ========================================================================\n  // SI ---------------------------------------------------------------------\n  'nN': unitWrap(1e-9, {\n    kg: 1,\n    m: 1,\n    s: -2\n  }),\n  // nanonewton\n  'μN': unitWrap(1e-6, {\n    kg: 1,\n    m: 1,\n    s: -2\n  }),\n  // micronewton\n  'mN': unitWrap(1e-3, {\n    kg: 1,\n    m: 1,\n    s: -2\n  }),\n  // millinewton\n  'N': unitWrap(1e0, {\n    kg: 1,\n    m: 1,\n    s: -2\n  }),\n  // newton\n  'kN': unitWrap(1e3, {\n    kg: 1,\n    m: 1,\n    s: -2\n  }),\n  // kilonewton\n  'MN': unitWrap(1e6, {\n    kg: 1,\n    m: 1,\n    s: -2\n  }),\n  // meganewton\n  'GN': unitWrap(1e9, {\n    kg: 1,\n    m: 1,\n    s: -2\n  }),\n  // giganewton\n  // Imperial ---------------------------------------------------------------\n  'ozf': unitWrap(0.278014, {\n    kg: 1,\n    m: 1,\n    s: -2\n  }),\n  // ounce force\n  'lbf': unitWrap(4.448222, {\n    kg: 1,\n    m: 1,\n    s: -2\n  }),\n  // pound force\n  // Others -----------------------------------------------------------------\n  'kgf': unitWrap(9.80665, {\n    kg: 1,\n    m: 1,\n    s: -2\n  }),\n  // kilogram force\n  // ========================================================================\n  // Energy\n  // ========================================================================\n  // SI ---------------------------------------------------------------------\n  'nJ': unitWrap(1e-9, {\n    kg: 1,\n    m: 2,\n    s: -2\n  }),\n  // nanojoule\n  'μJ': unitWrap(1e-6, {\n    kg: 1,\n    m: 2,\n    s: -2\n  }),\n  // microjoule\n  'mJ': unitWrap(1e-3, {\n    kg: 1,\n    m: 2,\n    s: -2\n  }),\n  // millijoule\n  'J': unitWrap(1e0, {\n    kg: 1,\n    m: 2,\n    s: -2\n  }),\n  // joule\n  'kJ': unitWrap(1e3, {\n    kg: 1,\n    m: 2,\n    s: -2\n  }),\n  // kilojoule\n  'MJ': unitWrap(1e6, {\n    kg: 1,\n    m: 2,\n    s: -2\n  }),\n  // megajoule\n  'GJ': unitWrap(1e9, {\n    kg: 1,\n    m: 2,\n    s: -2\n  }),\n  // gigajoule\n  'TJ': unitWrap(1e12, {\n    kg: 1,\n    m: 2,\n    s: -2\n  }),\n  // terajoule\n  'PJ': unitWrap(1e15, {\n    kg: 1,\n    m: 2,\n    s: -2\n  }),\n  // petajoule\n  // Others -----------------------------------------------------------------\n  'cal': unitWrap(4.1868, {\n    kg: 1,\n    m: 2,\n    s: -2\n  }),\n  // calorie\n  'kcal': unitWrap(4186.8, {\n    kg: 1,\n    m: 2,\n    s: -2\n  }),\n  // kilocalorie\n  'Cal': unitWrap(4186.8, {\n    kg: 1,\n    m: 2,\n    s: -2\n  }),\n  // kilocalorie\n  // ========================================================================\n  // Power\n  // ========================================================================\n  // SI ---------------------------------------------------------------------\n  'nW': unitWrap(1e-9, {\n    kg: 1,\n    m: 2,\n    s: -3\n  }),\n  // nanowatt\n  'μW': unitWrap(1e-6, {\n    kg: 1,\n    m: 2,\n    s: -3\n  }),\n  // microwatt\n  'mW': unitWrap(1e-3, {\n    kg: 1,\n    m: 2,\n    s: -3\n  }),\n  // milliwatt\n  'W': unitWrap(1e0, {\n    kg: 1,\n    m: 2,\n    s: -3\n  }),\n  // watt\n  'kW': unitWrap(1e3, {\n    kg: 1,\n    m: 2,\n    s: -3\n  }),\n  // kilowatt\n  'MW': unitWrap(1e6, {\n    kg: 1,\n    m: 2,\n    s: -3\n  }),\n  // megawatt\n  'GW': unitWrap(1e9, {\n    kg: 1,\n    m: 2,\n    s: -3\n  }),\n  // gigawatt\n  'TW': unitWrap(1e12, {\n    kg: 1,\n    m: 2,\n    s: -3\n  }),\n  // terawatt\n  'PW': unitWrap(1e15, {\n    kg: 1,\n    m: 2,\n    s: -3\n  }),\n  // petawatt\n  // ========================================================================\n  // Pressure\n  // ========================================================================\n  // SI ---------------------------------------------------------------------\n  'nPa': unitWrap(1e-9, {\n    kg: 1,\n    m: -1,\n    s: -2\n  }),\n  // nanopascal\n  'μPa': unitWrap(1e-6, {\n    kg: 1,\n    m: -1,\n    s: -2\n  }),\n  // micropascal\n  'mPa': unitWrap(1e-3, {\n    kg: 1,\n    m: -1,\n    s: -2\n  }),\n  // millipascal\n  'Pa': unitWrap(1e0, {\n    kg: 1,\n    m: -1,\n    s: -2\n  }),\n  // pascal\n  'kPa': unitWrap(1e3, {\n    kg: 1,\n    m: -1,\n    s: -2\n  }),\n  // kilopascal\n  'MPa': unitWrap(1e6, {\n    kg: 1,\n    m: -1,\n    s: -2\n  }),\n  // megapascal\n  'GPa': unitWrap(1e9, {\n    kg: 1,\n    m: -1,\n    s: -2\n  }),\n  // gigapascal\n  'TPa': unitWrap(1e12, {\n    kg: 1,\n    m: -1,\n    s: -2\n  }),\n  // terapascal\n  'PPa': unitWrap(1e15, {\n    kg: 1,\n    m: -1,\n    s: -2\n  }),\n  // petapascal\n  // Imperial ---------------------------------------------------------------\n  'psi': unitWrap(6.89475729e3, {\n    kg: 1,\n    m: -1,\n    s: -2\n  }),\n  // pounds per square inch\n  // Others -----------------------------------------------------------------\n  'atm': unitWrap(1.01325e5, {\n    kg: 1,\n    m: -1,\n    s: -2\n  }),\n  // standard atmosphere\n  'bar': unitWrap(1e5, {\n    kg: 1,\n    m: -1,\n    s: -2\n  }),\n  // bar\n  // ========================================================================\n  // Amount of substance\n  // ========================================================================\n  'nmol': unitWrap(1e-9, {\n    mol: 1\n  }),\n  // nanomole\n  'μmol': unitWrap(1e-6, {\n    mol: 1\n  }),\n  // micromole\n  'mmol': unitWrap(1e-3, {\n    mol: 1\n  }),\n  // millimole\n  'mol': unitWrap(1e0, {\n    mol: 1\n  }),\n  // mole (base unit)\n  'kmol': unitWrap(1e3, {\n    mol: 1\n  }),\n  // kilomole\n  'Mmol': unitWrap(1e6, {\n    mol: 1\n  }),\n  // megamole\n  'Gmol': unitWrap(1e9, {\n    mol: 1\n  }),\n  // gigamole\n  'Tmol': unitWrap(1e12, {\n    mol: 1\n  }),\n  // teramole\n  'Pmol': unitWrap(1e15, {\n    mol: 1\n  }),\n  // petamole\n  // Related ----------------------------------------------------------------\n  'N_A': unitWrap(6.022140857e23, {\n    mol: -1\n  }),\n  // Avogadro constant\n  // ========================================================================\n  // Luminous intensity\n  // ========================================================================\n  'ncd': unitWrap(1e-9, {\n    cd: 1\n  }),\n  // nanocandela\n  'μcd': unitWrap(1e-6, {\n    cd: 1\n  }),\n  // microcandela\n  'mcd': unitWrap(1e-3, {\n    cd: 1\n  }),\n  // millicandela\n  'cd': unitWrap(1e0, {\n    cd: 1\n  }),\n  // candela (base unit)\n  'kcd': unitWrap(1e3, {\n    cd: 1\n  }),\n  // kilocandela\n  'Mcd': unitWrap(1e6, {\n    cd: 1\n  }),\n  // megacandela\n  'Gcd': unitWrap(1e9, {\n    cd: 1\n  }),\n  // gigacandela\n  'Tcd': unitWrap(1e12, {\n    cd: 1\n  }),\n  // teracandela\n  'Pcd': unitWrap(1e15, {\n    cd: 1\n  }),\n  // petacandela\n  // ========================================================================\n  // Luminous flux\n  // ========================================================================\n  'nlm': unitWrap(1e-9, {\n    cd: 1\n  }),\n  // nanolumen\n  'μlm': unitWrap(1e-6, {\n    cd: 1\n  }),\n  // microlumen\n  'mlm': unitWrap(1e-3, {\n    cd: 1\n  }),\n  // millilumen\n  'lm': unitWrap(1e0, {\n    cd: 1\n  }),\n  // lumen\n  'klm': unitWrap(1e3, {\n    cd: 1\n  }),\n  // kilolumen\n  'Mlm': unitWrap(1e6, {\n    cd: 1\n  }),\n  // megalumen\n  'Glm': unitWrap(1e9, {\n    cd: 1\n  }),\n  // gigalumen\n  'Tlm': unitWrap(1e12, {\n    cd: 1\n  }),\n  // teralumen\n  'Plm': unitWrap(1e15, {\n    cd: 1\n  }),\n  // petalumen\n  // ========================================================================\n  // Illuminance\n  // ========================================================================\n  'nlx': unitWrap(1e-9, {\n    cd: 1,\n    m: -2\n  }),\n  // nanolux\n  'μlx': unitWrap(1e-6, {\n    cd: 1,\n    m: -2\n  }),\n  // microlux\n  'mlx': unitWrap(1e-3, {\n    cd: 1,\n    m: -2\n  }),\n  // millilux\n  'lx': unitWrap(1e0, {\n    cd: 1,\n    m: -2\n  }),\n  // lux\n  'klx': unitWrap(1e3, {\n    cd: 1,\n    m: -2\n  }),\n  // kilolux\n  'Mlx': unitWrap(1e6, {\n    cd: 1,\n    m: -2\n  }),\n  // megalux\n  'Glx': unitWrap(1e9, {\n    cd: 1,\n    m: -2\n  }),\n  // gigalux\n  'Tlx': unitWrap(1e12, {\n    cd: 1,\n    m: -2\n  }),\n  // teralux\n  'Plx': unitWrap(1e15, {\n    cd: 1,\n    m: -2\n  }),\n  // petalux\n  // ========================================================================\n  // Current\n  // ========================================================================\n  'nA': unitWrap(1e-9, {\n    A: 1\n  }),\n  // nanoampere\n  'μA': unitWrap(1e-6, {\n    A: 1\n  }),\n  // microampere\n  'mA': unitWrap(1e-3, {\n    A: 1\n  }),\n  // milliampere\n  'A': unitWrap(1e0, {\n    A: 1\n  }),\n  // ampere (base unit)\n  'kA': unitWrap(1e3, {\n    A: 1\n  }),\n  // kiloampere\n  'MA': unitWrap(1e6, {\n    A: 1\n  }),\n  // megaampere\n  'GA': unitWrap(1e9, {\n    A: 1\n  }),\n  // gigaampere\n  'TA': unitWrap(1e12, {\n    A: 1\n  }),\n  // teraampere\n  'PA': unitWrap(1e15, {\n    A: 1\n  }),\n  // petaampere\n  // ========================================================================\n  // Charge\n  // ========================================================================\n  'nC': unitWrap(1e-9, {\n    A: 1,\n    s: 1\n  }),\n  // nanocoulomb\n  'μC': unitWrap(1e-6, {\n    A: 1,\n    s: 1\n  }),\n  // microcoulomb\n  'mC': unitWrap(1e-3, {\n    A: 1,\n    s: 1\n  }),\n  // millicoulomb\n  'C': unitWrap(1e0, {\n    A: 1,\n    s: 1\n  }),\n  // coulomb\n  'kC': unitWrap(1e3, {\n    A: 1,\n    s: 1\n  }),\n  // kilocoulomb\n  'MC': unitWrap(1e6, {\n    A: 1,\n    s: 1\n  }),\n  // megacoulomb\n  'GC': unitWrap(1e9, {\n    A: 1,\n    s: 1\n  }),\n  // gigacoulomb\n  'TC': unitWrap(1e12, {\n    A: 1,\n    s: 1\n  }),\n  // teracoulomb\n  'PC': unitWrap(1e15, {\n    A: 1,\n    s: 1\n  }),\n  // petacoulomb\n  // ========================================================================\n  // Voltage\n  // ========================================================================\n  'nV': unitWrap(1e-9, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -1\n  }),\n  // nanovolt\n  'μV': unitWrap(1e-6, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -1\n  }),\n  // microvolt\n  'mV': unitWrap(1e-3, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -1\n  }),\n  // millivolt\n  'V': unitWrap(1e0, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -1\n  }),\n  // volt\n  'kV': unitWrap(1e3, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -1\n  }),\n  // kilovolt\n  'MV': unitWrap(1e6, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -1\n  }),\n  // megavolt\n  'GV': unitWrap(1e9, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -1\n  }),\n  // gigavolt\n  'TV': unitWrap(1e12, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -1\n  }),\n  // teravolt\n  'PV': unitWrap(1e15, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -1\n  }),\n  // petavolt\n  // ========================================================================\n  // Capacitance\n  // ========================================================================\n  'nF': unitWrap(1e-9, {\n    kg: -1,\n    m: -2,\n    s: 4,\n    A: 2\n  }),\n  // nanofarad\n  'μF': unitWrap(1e-6, {\n    kg: -1,\n    m: -2,\n    s: 4,\n    A: 2\n  }),\n  // microfarad\n  'mF': unitWrap(1e-3, {\n    kg: -1,\n    m: -2,\n    s: 4,\n    A: 2\n  }),\n  // millifarad\n  'F': unitWrap(1e0, {\n    kg: -1,\n    m: -2,\n    s: 4,\n    A: 2\n  }),\n  // farad\n  'kF': unitWrap(1e3, {\n    kg: -1,\n    m: -2,\n    s: 4,\n    A: 2\n  }),\n  // kilofarad\n  'MF': unitWrap(1e6, {\n    kg: -1,\n    m: -2,\n    s: 4,\n    A: 2\n  }),\n  // megafarad\n  'GF': unitWrap(1e9, {\n    kg: -1,\n    m: -2,\n    s: 4,\n    A: 2\n  }),\n  // gigafarad\n  'TF': unitWrap(1e12, {\n    kg: -1,\n    m: -2,\n    s: 4,\n    A: 2\n  }),\n  // terafarad\n  'PF': unitWrap(1e15, {\n    kg: -1,\n    m: -2,\n    s: 4,\n    A: 2\n  }),\n  // petafarad\n  // ========================================================================\n  // Resistance\n  // ========================================================================\n  'nΩ': unitWrap(1e-9, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -2\n  }),\n  // nanoohm\n  'μΩ': unitWrap(1e-6, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -2\n  }),\n  // microohm\n  'mΩ': unitWrap(1e-3, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -2\n  }),\n  // milliohm\n  'Ω': unitWrap(1e0, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -2\n  }),\n  // ohm\n  'kΩ': unitWrap(1e3, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -2\n  }),\n  // kiloohm\n  'MΩ': unitWrap(1e6, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -2\n  }),\n  // megaohm\n  'GΩ': unitWrap(1e9, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -2\n  }),\n  // gigaohm\n  'TΩ': unitWrap(1e12, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -2\n  }),\n  // teraohm\n  'PΩ': unitWrap(1e15, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -2\n  }),\n  // petaohm\n  // ========================================================================\n  // Resistance\n  // ========================================================================\n  'nS': unitWrap(1e-9, {\n    kg: -1,\n    m: -2,\n    s: 3,\n    A: 2\n  }),\n  // nanosiemens\n  'μS': unitWrap(1e-6, {\n    kg: -1,\n    m: -2,\n    s: 3,\n    A: 2\n  }),\n  // microsiemens\n  'mS': unitWrap(1e-3, {\n    kg: -1,\n    m: -2,\n    s: 3,\n    A: 2\n  }),\n  // millisiemens\n  'S': unitWrap(1e0, {\n    kg: -1,\n    m: -2,\n    s: 3,\n    A: 2\n  }),\n  // siemens\n  'kS': unitWrap(1e3, {\n    kg: -1,\n    m: -2,\n    s: 3,\n    A: 2\n  }),\n  // kilosiemens\n  'MS': unitWrap(1e6, {\n    kg: -1,\n    m: -2,\n    s: 3,\n    A: 2\n  }),\n  // megasiemens\n  'GS': unitWrap(1e9, {\n    kg: -1,\n    m: -2,\n    s: 3,\n    A: 2\n  }),\n  // gigasiemens\n  'TS': unitWrap(1e12, {\n    kg: -1,\n    m: -2,\n    s: 3,\n    A: 2\n  }),\n  // terasiemens\n  'PS': unitWrap(1e15, {\n    kg: -1,\n    m: -2,\n    s: 3,\n    A: 2\n  }),\n  // petasiemens\n  // ========================================================================\n  // Magnetic flux\n  // ========================================================================\n  'nWb': unitWrap(1e-9, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -1\n  }),\n  // nanoweber\n  'μWb': unitWrap(1e-6, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -1\n  }),\n  // microweber\n  'mWb': unitWrap(1e-3, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -1\n  }),\n  // milliweber\n  'Wb': unitWrap(1e0, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -1\n  }),\n  // weber\n  'kWb': unitWrap(1e3, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -1\n  }),\n  // kiloweber\n  'MWb': unitWrap(1e6, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -1\n  }),\n  // megaweber\n  'GWb': unitWrap(1e9, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -1\n  }),\n  // gigaweber\n  'TWb': unitWrap(1e12, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -1\n  }),\n  // teraweber\n  'PWb': unitWrap(1e15, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -1\n  }),\n  // petaweber\n  // ========================================================================\n  // Magnetic flux density\n  // ========================================================================\n  'nT': unitWrap(1e-9, {\n    kg: 1,\n    s: -2,\n    A: -1\n  }),\n  // nanotesla\n  'μT': unitWrap(1e-6, {\n    kg: 1,\n    s: -2,\n    A: -1\n  }),\n  // microtesla\n  'mT': unitWrap(1e-3, {\n    kg: 1,\n    s: -2,\n    A: -1\n  }),\n  // millitesla\n  'T': unitWrap(1e0, {\n    kg: 1,\n    s: -2,\n    A: -1\n  }),\n  // tesla\n  'kT': unitWrap(1e3, {\n    kg: 1,\n    s: -2,\n    A: -1\n  }),\n  // kilotesla\n  'MT': unitWrap(1e6, {\n    kg: 1,\n    s: -2,\n    A: -1\n  }),\n  // megatesla\n  'GT': unitWrap(1e9, {\n    kg: 1,\n    s: -2,\n    A: -1\n  }),\n  // gigatesla\n  'TT': unitWrap(1e12, {\n    kg: 1,\n    s: -2,\n    A: -1\n  }),\n  // teratesla\n  'PT': unitWrap(1e15, {\n    kg: 1,\n    s: -2,\n    A: -1\n  }),\n  // petatesla\n  // ========================================================================\n  // Magnetic flux\n  // ========================================================================\n  'nH': unitWrap(1e-9, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -2\n  }),\n  // nanohenry\n  'μH': unitWrap(1e-6, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -2\n  }),\n  // microhenry\n  'mH': unitWrap(1e-3, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -2\n  }),\n  // millihenry\n  'H': unitWrap(1e0, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -2\n  }),\n  // henry\n  'kH': unitWrap(1e3, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -2\n  }),\n  // kilohenry\n  'MH': unitWrap(1e6, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -2\n  }),\n  // megahenry\n  'GH': unitWrap(1e9, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -2\n  }),\n  // gigahenry\n  'TH': unitWrap(1e12, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -2\n  }),\n  // terahenry\n  'PH': unitWrap(1e15, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -2\n  }),\n  // petahenry\n  // ========================================================================\n  // Radioactivity (decays per unit of time)\n  // ========================================================================\n  'nBq': unitWrap(1e-9, {\n    s: -1\n  }),\n  // nanobecquerel\n  'μBq': unitWrap(1e-6, {\n    s: -1\n  }),\n  // microbecquerel\n  'mBq': unitWrap(1e-3, {\n    s: -1\n  }),\n  // millibecquerel\n  'Bq': unitWrap(1e0, {\n    s: -1\n  }),\n  // becquerel\n  'kBq': unitWrap(1e3, {\n    s: -1\n  }),\n  // kilobecquerel\n  'MBq': unitWrap(1e6, {\n    s: -1\n  }),\n  // megabecquerel\n  'GBq': unitWrap(1e9, {\n    s: -1\n  }),\n  // gigabecquerel\n  'TBq': unitWrap(1e12, {\n    s: -1\n  }),\n  // terabecquerel\n  'PBq': unitWrap(1e15, {\n    s: -1\n  }),\n  // petabecquerel\n  // ========================================================================\n  // Absorbed dose\n  // ========================================================================\n  'nGy': unitWrap(1e-9, {\n    m: 2,\n    s: -2\n  }),\n  // nanogray\n  'μGy': unitWrap(1e-6, {\n    m: 2,\n    s: -2\n  }),\n  // microgray\n  'mGy': unitWrap(1e-3, {\n    m: 2,\n    s: -2\n  }),\n  // milligray\n  'Gy': unitWrap(1e0, {\n    m: 2,\n    s: -2\n  }),\n  // gray\n  'kGy': unitWrap(1e3, {\n    m: 2,\n    s: -2\n  }),\n  // kilogray\n  'MGy': unitWrap(1e6, {\n    m: 2,\n    s: -2\n  }),\n  // megagray\n  'GGy': unitWrap(1e9, {\n    m: 2,\n    s: -2\n  }),\n  // gigagray\n  'TGy': unitWrap(1e12, {\n    m: 2,\n    s: -2\n  }),\n  // teragray\n  'PGy': unitWrap(1e15, {\n    m: 2,\n    s: -2\n  }),\n  // petagray\n  // ========================================================================\n  // Equivalent dose\n  // ========================================================================\n  'nSv': unitWrap(1e-9, {\n    m: 2,\n    s: -2\n  }),\n  // nanosievert\n  'μSv': unitWrap(1e-6, {\n    m: 2,\n    s: -2\n  }),\n  // microsievert\n  'mSv': unitWrap(1e-3, {\n    m: 2,\n    s: -2\n  }),\n  // millisievert\n  'Sv': unitWrap(1e0, {\n    m: 2,\n    s: -2\n  }),\n  // sievert\n  'kSv': unitWrap(1e3, {\n    m: 2,\n    s: -2\n  }),\n  // kilosievert\n  'MSv': unitWrap(1e6, {\n    m: 2,\n    s: -2\n  }),\n  // megasievert\n  'GSv': unitWrap(1e9, {\n    m: 2,\n    s: -2\n  }),\n  // gigasievert\n  'TSv': unitWrap(1e12, {\n    m: 2,\n    s: -2\n  }),\n  // terasievert\n  'PSv': unitWrap(1e15, {\n    m: 2,\n    s: -2\n  }),\n  // petasievert\n  // ========================================================================\n  // Data\n  // ========================================================================\n  'bit': unitWrap(1, {\n    bit: 1\n  }),\n  // bit\n  'B': unitWrap(8, {\n    bit: 1\n  }),\n  // byte\n  // Decimal bit (bit per IEC 60027) ----------------------------------------\n  'kbit': unitWrap(1e3, {\n    bit: 1\n  }),\n  // kilobit\n  'Mbit': unitWrap(1e6, {\n    bit: 1\n  }),\n  // megabit\n  'Gbit': unitWrap(1e9, {\n    bit: 1\n  }),\n  // gigabit\n  'Tbit': unitWrap(1e12, {\n    bit: 1\n  }),\n  // terabit\n  'Pbit': unitWrap(1e15, {\n    bit: 1\n  }),\n  // petabit\n  'Ebit': unitWrap(1e18, {\n    bit: 1\n  }),\n  // exabit\n  'Zbit': unitWrap(1e21, {\n    bit: 1\n  }),\n  // zettabit\n  'Ybit': unitWrap(1e24, {\n    bit: 1\n  }),\n  // yottabit\n  // Binary bit (bit per IEC 60027) -----------------------------------------\n  'Kibit': unitWrap(1024, {\n    bit: 1\n  }),\n  // kilobit\n  'Mibit': unitWrap(1048576, {\n    bit: 1\n  }),\n  // megabit\n  'Gibit': unitWrap(107374182, {\n    bit: 1\n  }),\n  // gigabit\n  'Tibit': unitWrap(1099511627776, {\n    bit: 1\n  }),\n  // terabit\n  'Pibit': unitWrap(1125899906842624, {\n    bit: 1\n  }),\n  // petabit\n  'Eibit': unitWrap(1152921504606847000, {\n    bit: 1\n  }),\n  // exabit\n  'Zibit': unitWrap(1180591620717411303424, {\n    bit: 1\n  }),\n  // zettabit\n  'Yibit': unitWrap(1208925819614629174706176, {\n    bit: 1\n  }),\n  // yottabit\n  // Decimal bit (b per IEEE 1541 Standard) ---------------------------------\n  'kb': unitWrap(1e3, {\n    bit: 1\n  }),\n  // kilobit\n  'Mb': unitWrap(1e6, {\n    bit: 1\n  }),\n  // megabit\n  'Gb': unitWrap(1e9, {\n    bit: 1\n  }),\n  // gigabit\n  'Tb': unitWrap(1e12, {\n    bit: 1\n  }),\n  // terabit\n  'Pb': unitWrap(1e15, {\n    bit: 1\n  }),\n  // petabit\n  'Eb': unitWrap(1e18, {\n    bit: 1\n  }),\n  // exabit\n  'Zb': unitWrap(1e21, {\n    bit: 1\n  }),\n  // zettabit\n  'Yb': unitWrap(1e24, {\n    bit: 1\n  }),\n  // yottabit\n  // Binary bit (b per IEEE 1541 Standard) ----------------------------------\n  'Kib': unitWrap(1024, {\n    bit: 1\n  }),\n  // kilobit\n  'Mib': unitWrap(1048576, {\n    bit: 1\n  }),\n  // megabit\n  'Gib': unitWrap(107374182, {\n    bit: 1\n  }),\n  // gigabit\n  'Tib': unitWrap(1099511627776, {\n    bit: 1\n  }),\n  // terabit\n  'Pib': unitWrap(1125899906842624, {\n    bit: 1\n  }),\n  // petabit\n  'Eib': unitWrap(1152921504606847000, {\n    bit: 1\n  }),\n  // exabit\n  'Zib': unitWrap(1180591620717411303424, {\n    bit: 1\n  }),\n  // zettabit\n  'Yib': unitWrap(1208925819614629174706176, {\n    bit: 1\n  }),\n  // yottabit\n  // Decimal byte -----------------------------------------------------------\n  'kB': unitWrap(8e3, {\n    bit: 1\n  }),\n  // kilobyte\n  'MB': unitWrap(8e6, {\n    bit: 1\n  }),\n  // megabyte\n  'GB': unitWrap(8e9, {\n    bit: 1\n  }),\n  // gigabyte\n  'TB': unitWrap(8e12, {\n    bit: 1\n  }),\n  // terabyte\n  'PB': unitWrap(8e15, {\n    bit: 1\n  }),\n  // petabyte\n  'EB': unitWrap(8e18, {\n    bit: 1\n  }),\n  // exabyte\n  'ZB': unitWrap(8e21, {\n    bit: 1\n  }),\n  // zettabyte\n  'YB': unitWrap(8e24, {\n    bit: 1\n  }),\n  // yottabyte\n  // Binary byte ------------------------------------------------------------\n  'KiB': unitWrap(8192, {\n    bit: 1\n  }),\n  // kilobyte\n  'MiB': unitWrap(8388608, {\n    bit: 1\n  }),\n  // megabyte\n  'GiB': unitWrap(8589934592, {\n    bit: 1\n  }),\n  // gigabyte\n  'TiB': unitWrap(8796093022208, {\n    bit: 1\n  }),\n  // terabyte\n  'PiB': unitWrap(9007199254740992, {\n    bit: 1\n  }),\n  // petabyte\n  'EiB': unitWrap(9223372036854776000, {\n    bit: 1\n  }),\n  // exabyte\n  'ZiB': unitWrap(9444732965739290427392, {\n    bit: 1\n  }),\n  // zettabyte\n  'YiB': unitWrap(9671406556917033397649408, {\n    bit: 1\n  }),\n  // yottabyte\n  // ========================================================================\n  // Miscellaneous\n  // ========================================================================\n  'G': unitWrap(6.67408e-11, {\n    m: 3,\n    kg: -1,\n    s: -2\n  }) // Gravitational constant\n\n};\n\nfunction unitWrap(value, units) {\n  return {\n    type: 'unit',\n    units: units,\n    value: valueWrap(value)\n  };\n}\n\nexport { createResolverFunction, defaultFunctions, defaultVariables, format, resolve };\n"]},"metadata":{},"sourceType":"module"}