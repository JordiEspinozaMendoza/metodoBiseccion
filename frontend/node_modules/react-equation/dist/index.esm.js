import React, { createContext, useContext } from 'react';
import classnames from 'classnames';
import { parse } from 'equation-parser';
import { format } from 'equation-resolver';

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _toArray(arr) {
  return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest();
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _createForOfIteratorHelper(o, allowArrayLike) {
  var it;

  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;

      var F = function () {};

      return {
        s: F,
        n: function () {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function (e) {
          throw e;
        },
        f: F
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var normalCompletion = true,
      didErr = false,
      err;
  return {
    s: function () {
      it = o[Symbol.iterator]();
    },
    n: function () {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function (e) {
      didErr = true;
      err = e;
    },
    f: function () {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}

/**
 * Compiler-error and runtime-error on unhandled type
 *
 * @param typed: Object with type-property
 * @param getMessage: get an error message for runtime errors
 */
function throwUnknownType(typed, getMessage) {
  throw new Error(getMessage(typed && typed.type || 'unknown'));
}

var indexOffset = 0.3;
var indexFactor = 0.8;
var styles = {
  main: {
    display: 'inline-block',
    fontStyle: 'italic'
  },
  index: {
    fontSize: "".concat(indexFactor * 100, "%"),
    position: 'relative'
  }
};
function variable(_ref) {
  var name = _ref.name;

  var _name$split = name.split('_'),
      _name$split2 = _toArray(_name$split),
      main = _name$split2[0],
      indices = _name$split2.slice(1);

  return {
    type: 'span',
    props: {
      style: _objectSpread2(_objectSpread2({}, styles.main), {}, {
        marginLeft: /^[%‰°'"]/.test(main) ? '-0.2em' : null
      })
    },
    aboveMiddle: 0.7,
    belowMiddle: 0.7 + indices.length * indexOffset,
    children: /*#__PURE__*/React.createElement(React.Fragment, null, main, indices.map(function (indexName, idx) {
      return /*#__PURE__*/React.createElement("span", {
        key: idx,
        style: _objectSpread2(_objectSpread2({}, styles.index), {}, {
          top: "".concat(indexOffset * (idx + 1) / indexFactor, "em")
        })
      }, indexName);
    }))
  };
}

function Parens(_ref) {
  var height = _ref.height,
      _ref$type = _ref.type,
      type = _ref$type === void 0 ? '()' : _ref$type,
      _ref$flip = _ref.flip,
      flip = _ref$flip === void 0 ? false : _ref$flip;
  return /*#__PURE__*/React.createElement("svg", {
    width: "0.4em",
    style: {
      verticalAlign: 'top',
      transform: flip ? 'scale(-1, 1)' : undefined
    },
    viewBox: "0 0 0.4 ".concat(height)
  }, /*#__PURE__*/React.createElement("path", {
    d: pathBuilders[type](height)
  }));
}
var pathBuilders = {
  '()': function _(height) {
    var offsetHeight = height - 1.4;
    return "M0.094 0.681q0 -0.312 0.18 -0.476l0.028 -0.024l0.013 0q0.012 0 0.015 0.003t0.003 0.006q0 0.004 -0.011 0.015q-0.155 0.164 -0.155 0.476l0 ".concat(offsetHeight, "q0 0.321 0.155 0.476q0.011 0.011 0.011 0.015q0 0.009 -0.018 0.009l-0.013 0l-0.028 -0.024q-0.18 -0.164 -0.18 -0.476Z");
  },
  '[]': function _(height) {
    var offsetHeight = height - 0.55;
    return "M0.134 0.19h0.24v0.08h-0.16v".concat(offsetHeight, "h0.16v0.08h-0.24Z");
  },
  '{}': function _(height) {
    var offsetHeight = height - 1.37;
    return "M0.3472 ".concat(1.161 + offsetHeight, "q0 0.014 -0.0048 0.02h-0.0144q-0.0608 0 -0.104 -0.026t-0.0544 -0.08q-0.0016 -0.006 -0.0024 -0.1445v").concat(-offsetHeight / 2, "q0 -0.021 0 -0.053q-0.0008 -0.089 -0.004 -0.1q-0.0008 -0.001 -0.0008 -0.002q-0.0096 -0.031 -0.0368 -0.053t-0.06 -0.023q-0.0088 0 -0.0112 -0.003t-0.0024 -0.016t0.0024 -0.016t0.0112 -0.003q0.0328 0 0.06 -0.022t0.0368 -0.054q0.0032 -0.012 0.0032 -0.025t0.0016 -0.131v").concat(-offsetHeight / 2, "q0.0008 -0.137 0.0024 -0.144q0.0064 -0.032 0.0256 -0.053q0.0208 -0.026 0.064 -0.042q0.0296 -0.008 0.0424 -0.009q0.0016 0 0.0104 0t0.0144 -0.001h0.016q0.0048 0.006 0.0048 0.018q0 0.013 -0.0024 0.016q-0.0016 0.003 -0.0128 0.003q-0.0448 0.003 -0.0744 0.032q-0.016 0.015 -0.0208 0.034q-0.004 0.013 -0.004 0.148v").concat(offsetHeight / 2, "q0 0.13 -0.0008 0.136q-0.004 0.039 -0.0272 0.067t-0.0576 0.041l-0.0112 0.005l0.0112 0.005q0.0336 0.013 0.0568 0.04t0.028 0.068q0.0008 0.006 0.0008 0.136v").concat(offsetHeight / 2, "q0 0.1355 0.004 0.1475q0.008 0.028 0.0352 0.046t0.06 0.02q0.0112 0 0.0128 0.004q0.0024 0.002 0.0024 0.014Z");
  }
};

function block(_ref) {
  var child = _ref.child;
  var content = renderInternal(child);
  return {
    type: 'span',
    props: {
      style: {
        height: "".concat(content.height, "em")
      }
    },
    aboveMiddle: content.aboveMiddle,
    belowMiddle: content.belowMiddle,
    children: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Parens, {
      height: content.height
    }), content.elements, /*#__PURE__*/React.createElement(Parens, {
      height: content.height,
      flip: true
    }))
  };
}

function func(node) {
  // Use manual rendering to allow commas to be pushed between args
  // without having to resort to manual alignment
  var argParts = [];
  node.args.forEach(function (arg, i) {
    if (i > 0) {
      argParts.push(simplePart(',', {
        paddingRight: '0.4em'
      }));
    }

    pushTree(arg, argParts);
  }); // Render name as variable or placeholder

  var nameRendering = renderInternal(node.type === 'function' ? {
    type: 'variable',
    name: node.name
  } : {
    type: 'operand-placeholder'
  });
  var argRendering = toRendering(argParts);
  return {
    type: 'span',
    props: {
      style: {
        height: "".concat(Math.max(nameRendering.height, argRendering.height), "em")
      }
    },
    aboveMiddle: Math.max(nameRendering.aboveMiddle, argRendering.aboveMiddle),
    belowMiddle: Math.max(nameRendering.belowMiddle, argRendering.belowMiddle),
    children: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("span", {
      style: {
        position: 'relative',
        top: "".concat(argRendering.aboveMiddle - nameRendering.aboveMiddle, "em")
      }
    }, nameRendering.elements), /*#__PURE__*/React.createElement(Parens, {
      height: argRendering.height
    }), argRendering.elements, /*#__PURE__*/React.createElement(Parens, {
      height: argRendering.height,
      flip: true
    }))
  };
}

var fontFactor = 0.9;
var separatorSize = 0.06;
var styles$1 = {
  wrapper: {
    display: 'inline-block',
    verticalAlign: 'top'
  },
  part: {
    fontSize: "".concat(fontFactor * 100, "%"),
    display: 'block',
    textAlign: 'center',
    padding: '0 0.4em'
  },
  separator: {
    display: 'block',
    background: 'currentColor',
    borderTop: "".concat(separatorSize, "em solid currentColor")
  }
};
function fraction(_ref) {
  var a = _ref.a,
      b = _ref.b;
  var top = renderInternal(a, true);
  var bottom = renderInternal(b, true);
  return {
    type: 'span',
    props: {
      style: _objectSpread2({}, styles$1.wrapper)
    },
    aboveMiddle: top.height * fontFactor - separatorSize / 2,
    belowMiddle: bottom.height * fontFactor + separatorSize * 3 / 2,
    children: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("span", {
      style: _objectSpread2(_objectSpread2({}, styles$1.part), {}, {
        height: "".concat(top.height, "em")
      })
    }, top.elements), /*#__PURE__*/React.createElement("span", {
      style: styles$1.separator
    }), /*#__PURE__*/React.createElement("span", {
      style: _objectSpread2(_objectSpread2({}, styles$1.part), {}, {
        height: "".concat(bottom.height, "em")
      })
    }, bottom.elements))
  };
}

var fontFactor$1 = 0.7;
var exponentOffset = 0.8;
var styles$2 = {
  exponent: {
    fontSize: "".concat(fontFactor$1 * 100, "%"),
    display: 'inline-block',
    verticalAlign: 'top'
  }
};
function power(_ref) {
  var a = _ref.a,
      b = _ref.b;
  var base = renderInternal(a, false);
  var exponent = renderInternal(b, true);
  var baseOffset = exponent.height * fontFactor$1 - exponentOffset;
  return {
    type: 'span',
    props: {
      style: {
        height: "".concat(base.height + baseOffset, "em")
      }
    },
    aboveMiddle: base.height / 2 + baseOffset,
    belowMiddle: base.height / 2,
    children: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("span", {
      style: {
        position: 'relative',
        top: "".concat(baseOffset, "em"),
        height: "".concat(base.height, "em")
      }
    }, base.elements), /*#__PURE__*/React.createElement("span", {
      style: _objectSpread2(_objectSpread2({}, styles$2.exponent), {}, {
        height: "".concat(exponent.height, "em")
      })
    }, exponent.elements))
  };
}

var padding = 0.2;
var cellPadding = 0.4;
var fontFactor$2 = 0.9;
var styles$3 = {
  wrapper: {
    padding: '0.1em 0'
  },
  table: {
    display: 'inline-table',
    verticalAlign: 'top',
    borderCollapse: 'collapse',
    fontSize: "".concat(fontFactor$2 * 100, "%"),
    marginTop: '0.1em'
  },
  cell: {
    padding: '0.2em 0.5em',
    textAlign: 'center',
    verticalAlign: 'top'
  },
  cellContent: {
    width: '100%',
    height: '100%'
  }
};
function matrix(_ref) {
  var values = _ref.values,
      m = _ref.m;
  var content = values.map(function (row) {
    return row.map(function (value) {
      return renderInternal(value);
    });
  });
  var cellHeight = sumOf(content, function (row) {
    return maxOf(row, function (_ref2) {
      var height = _ref2.height;
      return height;
    });
  });
  var height = fontFactor$2 * (m * cellPadding + cellHeight);
  return {
    type: 'span',
    props: {
      style: styles$3.wrapper
    },
    aboveMiddle: (height + padding) / 2,
    belowMiddle: (height + padding) / 2,
    children: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Parens, {
      height: height,
      type: "[]"
    }), /*#__PURE__*/React.createElement("table", {
      style: styles$3.table
    }, /*#__PURE__*/React.createElement("tbody", null, content.map(function (row, rowIdx) {
      var rowHeight = maxOf(row, function (cell) {
        return cell.height;
      }) + cellPadding;
      var aboveMiddle = maxOf(row, function (cell) {
        return cell.aboveMiddle;
      });
      return /*#__PURE__*/React.createElement("tr", {
        key: rowIdx,
        style: {
          height: "".concat(rowHeight, "em")
        }
      }, row.map(function (cell, cellIdx) {
        return /*#__PURE__*/React.createElement("td", {
          key: cellIdx,
          style: styles$3.cell
        }, /*#__PURE__*/React.createElement("div", {
          style: {
            position: 'relative',
            top: "".concat(aboveMiddle - cell.aboveMiddle, "em")
          }
        }, cell.elements));
      }));
    }))), /*#__PURE__*/React.createElement(Parens, {
      height: height,
      type: "[]",
      flip: true
    }))
  };
}

function maxOf(array, get) {
  return array.reduce(function (current, value) {
    return Math.max(current, get(value));
  }, 0);
}

function sumOf(array, get) {
  return array.reduce(function (current, value) {
    return current + get(value);
  }, 0);
}

var iconSize = 1.8;
var fontFactor$3 = 0.8;
var styles$4 = {
  wrapper: {
    display: 'inline-block'
  },
  block: {
    display: 'inline-block',
    verticalAlign: 'top',
    textAlign: 'center'
  },
  icon: {
    display: 'block',
    lineHeight: 0.8,
    fontSize: '2.25em',
    padding: '0 0.1em',
    top: '1px'
  },
  small: {
    display: 'block',
    fontSize: "".concat(fontFactor$3 * 100, "%")
  }
};
function sum(_ref) {
  var _ref$args = _slicedToArray(_ref.args, 4),
      variable = _ref$args[0],
      start = _ref$args[1],
      end = _ref$args[2],
      expression = _ref$args[3];

  var top = renderInternal(end || {
    type: 'operand-placeholder'
  });
  var bottom = renderInternal({
    type: 'equals',
    a: variable || {
      type: 'operand-placeholder'
    },
    b: start || {
      type: 'operand-placeholder'
    }
  });
  var rendering = renderInternal(wrapParenthesis(expression || {
    type: 'operand-placeholder'
  }), false, {
    type: 'span',
    props: {
      style: styles$4.block
    },
    aboveMiddle: iconSize / 2 + top.height * fontFactor$3,
    belowMiddle: iconSize / 2 + bottom.height * fontFactor$3,
    children: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("span", {
      style: _objectSpread2({
        height: "".concat(top.height, "em")
      }, styles$4.small)
    }, top.elements), /*#__PURE__*/React.createElement("span", {
      style: styles$4.icon
    }, "\u03A3"), /*#__PURE__*/React.createElement("span", {
      style: _objectSpread2({
        height: "".concat(bottom.height, "em")
      }, styles$4.small)
    }, bottom.elements))
  });
  return {
    type: 'span',
    props: {
      style: styles$4.wrapper
    },
    aboveMiddle: rendering.aboveMiddle,
    belowMiddle: rendering.belowMiddle,
    children: rendering.elements
  };
}

function wrapParenthesis(tree) {
  if (canStandAlone(tree)) {
    return tree;
  } else {
    return {
      type: 'block',
      child: tree
    };
  }
}

function canStandAlone(tree) {
  return tree.type === 'variable' || tree.type === 'number' || tree.type === 'block' || tree.type === 'function' || tree.type === 'matrix' || tree.type === 'divide-fraction' || tree.type === 'power' || tree.type === 'operand-placeholder' || tree.type === 'function-placeholder' || (tree.type === 'negative' || tree.type === 'positive' || tree.type === 'positive-negative' || tree.type === 'operator-unary-placeholder') && canStandAlone(tree.value);
}

var styles$5 = {
  wrapper: {
    display: 'inline-block',
    verticalAlign: 'top',
    padding: '0 0.3em'
  },
  line: {
    position: 'absolute',
    borderLeft: '0.08em solid currentColor',
    top: '0.2em',
    height: "calc(100% - 0.4em)"
  }
};
function abs(_ref) {
  var _ref$args = _slicedToArray(_ref.args, 1),
      expression = _ref$args[0];

  var content = renderInternal(expression || {
    type: 'operand-placeholder'
  });
  return {
    type: 'span',
    props: {
      style: _objectSpread2(_objectSpread2({}, styles$5.wrapper), {}, {
        height: "".concat(content.height, "em")
      })
    },
    aboveMiddle: content.aboveMiddle,
    belowMiddle: content.belowMiddle,
    children: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("span", {
      style: _objectSpread2(_objectSpread2({}, styles$5.line), {}, {
        left: '0.1em'
      })
    }), content.elements, /*#__PURE__*/React.createElement("span", {
      style: _objectSpread2(_objectSpread2({}, styles$5.line), {}, {
        right: '0.1em'
      })
    }))
  };
}

function RootSymbol(_ref) {
  var height = _ref.height,
      style = _ref.style;
  height = Math.max(height, 1.4);
  return /*#__PURE__*/React.createElement("svg", {
    width: "0.8em",
    style: style,
    viewBox: "0 0 0.8 ".concat(height - 0.1)
  }, /*#__PURE__*/React.createElement("path", {
    d: buildPath(morphSvg(pathCommands, height))
  }));
}

function morphSvg(commands, height) {
  var offsetHeight = height - 1.4; // Factors determined by experiment
  // Move top and inner elbow to keep the width of the long
  // line at ~0.5em

  var topOffsetFactor = 0.015 * Math.atan(offsetHeight * 1.25);
  var elbowFactor = 0.08 * Math.atan(offsetHeight * 0.556);
  return commands.map(function (_ref2, idx) {
    var c = _ref2.c,
        v = _ref2.v;

    // First point, anchor of top
    // Move full offset
    if (idx === 0) {
      return {
        c: c,
        v: [v[0] - topOffsetFactor, v[1]]
      }; // Second point, beizer
      // Move to keep round top
    } else if (idx === 1) {
      return {
        c: c,
        v: [v[0] - topOffsetFactor * 0.75, v[1], v[2] - topOffsetFactor * 0.5, v[3]]
      }; // Last point is inside elbow, should move up along short line
    } else if (idx === 18) {
      return {
        c: c,
        v: [// Move along existing line
        v[0] - elbowFactor * 0.416, v[1] - elbowFactor * 0.909 + offsetHeight]
      }; // Move other points down
    } else if (idx > 3) {
      return {
        c: c,
        v: v.map(function (value, valueIdx) {
          return valueIdx % 2 === 0 ? value : value + offsetHeight;
        })
      };
    }

    return {
      c: c,
      v: v
    };
  });
} // Build path-string from commands


function buildPath(commands) {
  return commands.map(function (_ref3) {
    var c = _ref3.c,
        v = _ref3.v;
    return c + v.join(' ');
  }).join('');
} // Commands used to draw a square root sign


var pathCommands = [{
  c: 'M',
  v: [0.7767, 0.014]
}, {
  c: 'Q',
  v: [0.7847, 0, 0.7967, 0]
}, {
  c: 'L',
  v: [0.8, 0]
}, {
  c: 'L',
  v: [0.8, 0.08]
}, {
  c: 'L',
  v: [0.351, 0.993]
}, {
  c: 'Q',
  v: [0.347, 1, 0.332, 1]
}, {
  c: 'Q',
  v: [0.323, 1, 0.32, 0.997]
}, {
  c: 'L',
  v: [0.126, 0.575]
}, {
  c: 'L',
  v: [0.11, 0.586]
}, {
  c: 'Q',
  v: [0.095, 0.598, 0.079, 0.61]
}, {
  c: 'T',
  v: [0.061, 0.622]
}, {
  c: 'Q',
  v: [0.057, 0.622, 0.048, 0.614]
}, {
  c: 'T',
  v: [0.038, 0.6]
}, {
  c: 'Q',
  v: [0.038, 0.597, 0.039, 0.596]
}, {
  c: 'Q',
  v: [0.041, 0.592, 0.106, 0.542]
}, {
  c: 'T',
  v: [0.173, 0.491]
}, {
  c: 'Q',
  v: [0.175, 0.489, 0.178, 0.489]
}, {
  c: 'Q',
  v: [0.185, 0.489, 0.19, 0.499]
}, {
  c: 'L',
  v: [0.3578, 0.8658]
}, {
  c: 'Z',
  v: []
}];

var padding$1 = 0.1;
var styles$6 = {
  wrapper: {
    position: 'relative',
    display: 'inline-block',
    marginTop: '0.1em'
  },
  symbol: {
    verticalAlign: 'top'
  },
  line: {
    position: 'absolute',
    width: 'calc(100% - 0.7em)',
    borderTop: '0.08em solid currentColor',
    top: 0,
    left: '0.8em'
  }
};
function sqrt(_ref) {
  var _ref$args = _slicedToArray(_ref.args, 1),
      expression = _ref$args[0];

  var content = renderInternal(expression || {
    type: 'operand-placeholder'
  });
  return {
    type: 'span',
    props: {
      style: _objectSpread2(_objectSpread2({}, styles$6.wrapper), {}, {
        height: "".concat(content.height + padding$1, "em")
      })
    },
    aboveMiddle: content.aboveMiddle + padding$1,
    belowMiddle: content.belowMiddle,
    children: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(RootSymbol, {
      style: styles$6.symbol,
      height: content.height + padding$1
    }), /*#__PURE__*/React.createElement("div", {
      style: styles$6.line
    }), content.elements)
  };
}

var rootIndexFactor = 0.7;
var rootIndexOffset = 0.8;
var styles$7 = {
  wrapper: {
    display: 'inline-block',
    position: 'relative'
  },
  indexOuter: {
    display: 'inline-block'
  },
  indexInner: {
    fontSize: "".concat(rootIndexFactor * 100, "%"),
    verticalAlign: 'top'
  }
};
function root(_ref) {
  var _ref$args = _slicedToArray(_ref.args, 2),
      rootIndex = _ref$args[0],
      expression = _ref$args[1];

  var rootIndexContent = renderInternal(rootIndex || {
    type: 'operand-placeholder'
  }); // Pretend this is a sqrt to avoid repeat of logic

  var sqrtContent = sqrt({
    type: 'function',
    name: 'sqrt',
    args: [expression]
  });
  var bottom = sqrtContent.belowMiddle - rootIndexOffset;
  var offset = 1 - Math.atan(sqrtContent.aboveMiddle + sqrtContent.belowMiddle) * 0.6;
  var rendering = toRendering([{
    type: 'span',
    props: {
      style: _objectSpread2(_objectSpread2({}, styles$7.indexOuter), {}, {
        height: "".concat(rootIndexContent.height * rootIndexFactor, "em"),
        marginRight: "".concat(-offset, "em"),
        minWidth: "".concat(offset, "em")
      })
    },
    aboveMiddle: rootIndexContent.height * rootIndexFactor - bottom,
    belowMiddle: bottom,
    children: /*#__PURE__*/React.createElement("span", {
      style: styles$7.indexInner
    }, rootIndexContent.elements)
  }, sqrtContent]);
  return {
    type: 'span',
    props: {
      style: styles$7.wrapper
    },
    aboveMiddle: rendering.aboveMiddle,
    belowMiddle: rendering.belowMiddle,
    children: rendering.elements
  };
}

var defaultErrorHandler = function defaultErrorHandler(node) {
  return "Error: ".concat(node.errorType);
};

var render = function render(node) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$errorHandler = _ref.errorHandler,
      errorHandler = _ref$errorHandler === void 0 ? {} : _ref$errorHandler,
      className = _ref.className,
      style = _ref.style;

  var baseProps = {
    className: className,
    style: _objectSpread2(_objectSpread2({}, style), {}, {
      display: 'inline-block',
      lineHeight: 1.4
    })
  };

  if (node.type === 'parser-error') {
    return /*#__PURE__*/React.createElement("span", baseProps, /*#__PURE__*/React.createElement("div", null, node.equation.substring(0, node.start), /*#__PURE__*/React.createElement("span", {
      style: {
        color: 'red'
      }
    }, node.equation.substring(node.start, node.end + 1)), node.equation.substring(node.end + 1)), /*#__PURE__*/React.createElement("div", null, (errorHandler[node.errorType] || defaultErrorHandler)(node)));
  }

  if (node.type === 'resolve-error' && node.node) {
    // TODO: pretty error handling
    var _renderInternal = renderInternal(node.node),
        _elements = _renderInternal.elements,
        _height = _renderInternal.height;

    return /*#__PURE__*/React.createElement("span", baseProps, /*#__PURE__*/React.createElement("span", {
      style: {
        height: "".concat(_height, "em"),
        display: 'inline-block'
      }
    }, _elements), /*#__PURE__*/React.createElement("br", null), (errorHandler[node.errorType] || defaultErrorHandler)(node));
  }

  if (node.type === 'resolve-error') {
    return /*#__PURE__*/React.createElement("span", baseProps, (errorHandler[node.errorType] || defaultErrorHandler)(node));
  }

  var _renderInternal2 = renderInternal(node),
      elements = _renderInternal2.elements,
      height = _renderInternal2.height;

  return /*#__PURE__*/React.createElement("span", _extends({}, baseProps, {
    style: _objectSpread2({
      height: "".concat(height, "em")
    }, baseProps.style)
  }), elements);
};
function renderInternal(tree) {
  var skipParentheses = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var parts;

  for (var _len = arguments.length, initial = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    initial[_key - 2] = arguments[_key];
  }

  if (skipParentheses && tree.type === 'block') {
    parts = pushTree(tree.child, initial);
  } else {
    parts = pushTree(tree, initial);
  }

  return toRendering(parts);
}
function toRendering(parts) {
  var aboveMiddle = parts.reduce(function (current, part) {
    return Math.max(current, part.aboveMiddle);
  }, 0);
  var belowMiddle = parts.reduce(function (current, part) {
    return Math.max(current, part.belowMiddle);
  }, 0);

  var _iterator = _createForOfIteratorHelper(parts),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var part = _step.value;
      part.props.style = _objectSpread2(_objectSpread2({}, part.props.style), {}, {
        top: part.aboveMiddle < aboveMiddle ? "".concat(aboveMiddle - part.aboveMiddle, "em") : null,
        position: 'relative'
      });
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return {
    aboveMiddle: aboveMiddle,
    belowMiddle: belowMiddle,
    height: aboveMiddle + belowMiddle,
    elements: parts.map(function (part, idx) {
      return /*#__PURE__*/React.createElement(part.type, _objectSpread2({
        key: idx
      }, part.props), part.children);
    })
  };
} // Lookups for operator symbols with optional styling

var binaryOperatorLookup = {
  'plus': ['+'],
  // Unicode MINUS
  'minus': ['−'],
  // Unicode MINUS
  'plus-minus': ['±'],
  'multiply-implicit': ['', {
    padding: '0 0.1em'
  }],
  // Unicode DOT OPERATOR
  'multiply-dot': ['⋅', {
    padding: '0 0.15em'
  }],
  // Unicode MULTIPLICATION SIGN
  'multiply-cross': ['×'],
  // Unicode DIVISION SIGN
  'divide-inline': ['÷'],
  'equals': ['='],
  'less-than': ['<'],
  'less-than-equals': ['≤'],
  'greater-than': ['>'],
  'greater-than-equals': ['≥'],
  'approximates': ['≈'],
  'operator-placeholder': ['?']
};
var unaryOperatorLookup = {
  'positive': ['+'],
  // Unicode MINUS
  'negative': ['−'],
  'positive-negative': ['±'],
  'operator-unary-placeholder': ['?']
};
function pushTree(node, current) {
  switch (node.type) {
    // Operands
    case 'number':
      current.push(simplePart(node.value));
      break;

    case 'variable':
      current.push(variable(node));
      break;

    case 'operand-placeholder':
      current.push(simplePart('_'));
      break;
    // Unary operators

    case 'positive':
    case 'negative':
    case 'positive-negative':
    case 'operator-unary-placeholder':
      {
        var _unaryOperatorLookup$ = _slicedToArray(unaryOperatorLookup[node.type], 2),
            symbol = _unaryOperatorLookup$[0],
            _unaryOperatorLookup$2 = _unaryOperatorLookup$[1],
            style = _unaryOperatorLookup$2 === void 0 ? {
          padding: '0 0.1em'
        } : _unaryOperatorLookup$2;

        current.push(simplePart(symbol, style));
        pushTree(node.value, current);
        break;
      }

    case 'plus':
    case 'minus':
    case 'plus-minus':
    case 'multiply-implicit':
    case 'multiply-dot':
    case 'multiply-cross':
    case 'divide-inline':
    case 'equals':
    case 'less-than':
    case 'less-than-equals':
    case 'greater-than':
    case 'greater-than-equals':
    case 'approximates':
    case 'operator-placeholder':
      {
        var _binaryOperatorLookup = _slicedToArray(binaryOperatorLookup[node.type], 2),
            _symbol = _binaryOperatorLookup[0],
            _binaryOperatorLookup2 = _binaryOperatorLookup[1],
            _style = _binaryOperatorLookup2 === void 0 ? {
          padding: '0 0.3em'
        } : _binaryOperatorLookup2;

        pushTree(node.a, current);
        current.push(simplePart(_symbol, _style));
        pushTree(node.b, current);
        break;
      }

    case 'divide-fraction':
      current.push(fraction(node));
      break;

    case 'power':
      current.push(power(node));
      break;

    case 'block':
      current.push(block(node));
      break;

    case 'function':
      pushFunction(node, current);
      break;

    case 'function-placeholder':
      current.push(func(node));
      break;

    case 'matrix':
      current.push(matrix(node));
      break;

    default:
      throwUnknownType(node, function (type) {
        return "Equation render: cannot resolve type \"".concat(type, "\"");
      });
  }

  return current;
}
function simplePart(value, style) {
  return {
    type: 'span',
    props: {
      style: style
    },
    children: value,
    aboveMiddle: 0.7,
    belowMiddle: 0.7
  };
}

function pushFunction(tree, current) {
  switch (tree.name) {
    case 'sum':
      current.push(sum(tree));
      break;

    case 'abs':
      current.push(abs(tree));
      break;

    case 'sqrt':
      current.push(sqrt(tree));
      break;

    case 'root':
      current.push(root(tree));
      break;

    default:
      current.push(func(tree));
      break;
  }
}

var context = /*#__PURE__*/createContext({});

var EquationOptions = function EquationOptions(_ref) {
  var children = _ref.children,
      options = _objectWithoutProperties(_ref, ["children"]);

  return /*#__PURE__*/React.createElement(context.Provider, {
    value: options
  }, children);
};

var Equation = function Equation(_ref) {
  var value = _ref.value,
      errorHandler = _ref.errorHandler,
      className = _ref.className,
      style = _ref.style;

  var _useContext = useContext(context),
      errorHandlerGlobal = _useContext.errorHandler,
      classNameGlobal = _useContext.className,
      styleGlobal = _useContext.style;

  return render(parse(value), {
    errorHandler: _objectSpread2(_objectSpread2({}, errorHandlerGlobal), errorHandler),
    className: classnames(classNameGlobal, className),
    style: _objectSpread2(_objectSpread2({}, styleGlobal), style)
  });
};

var unionArrays = function unionArrays(a, b) {
  if (!a) {
    return b;
  } else if (!b) {
    return a;
  } else {
    return [].concat(_toConsumableArray(a), _toConsumableArray(b));
  }
};

var EquationEvaluate = function EquationEvaluate(_ref) {
  var value = _ref.value,
      errorHandler = _ref.errorHandler,
      className = _ref.className,
      style = _ref.style,
      unit = _ref.unit,
      localVariables = _ref.variables,
      localFunctions = _ref.functions,
      localSimplifiableUnits = _ref.simplifiableUnits;

  var _useContext = useContext(context),
      errorHandlerGlobal = _useContext.errorHandler,
      classNameGlobal = _useContext.className,
      styleGlobal = _useContext.style,
      globalVariables = _useContext.variables,
      globalFunctions = _useContext.functions,
      globalSimplifiableUnits = _useContext.simplifiableUnits;

  var equation = parse(value);
  var unitEquation = unit ? parse(unit) : null;
  var tree = format(equation, unitEquation, {
    variables: _objectSpread2(_objectSpread2({}, globalVariables), localVariables),
    functions: _objectSpread2(_objectSpread2({}, globalFunctions), localFunctions),
    simplifiableUnits: unionArrays(localSimplifiableUnits, globalSimplifiableUnits)
  });
  return render(tree, {
    errorHandler: _objectSpread2(_objectSpread2({}, errorHandlerGlobal), errorHandler),
    className: classnames(classNameGlobal, className),
    style: _objectSpread2(_objectSpread2({}, styleGlobal), style)
  });
};

var EquationPreparsed = function EquationPreparsed(_ref) {
  var value = _ref.value,
      errorHandler = _ref.errorHandler,
      className = _ref.className,
      style = _ref.style;

  var _useContext = useContext(context),
      errorHandlerGlobal = _useContext.errorHandler,
      classNameGlobal = _useContext.className,
      styleGlobal = _useContext.style;

  return render(value, {
    errorHandler: _objectSpread2(_objectSpread2({}, errorHandlerGlobal), errorHandler),
    className: classnames(classNameGlobal, className),
    style: _objectSpread2(_objectSpread2({}, styleGlobal), style)
  });
};

var unionArrays$1 = function unionArrays(a, b) {
  if (!a) {
    return b;
  } else if (!b) {
    return a;
  } else {
    return [].concat(_toConsumableArray(a), _toConsumableArray(b));
  }
};

var EquationEvaluatePreparsed = function EquationEvaluatePreparsed(_ref) {
  var value = _ref.value,
      errorHandler = _ref.errorHandler,
      className = _ref.className,
      style = _ref.style,
      unit = _ref.unit,
      localVariables = _ref.variables,
      localFunctions = _ref.functions,
      localSimplifiableUnits = _ref.simplifiableUnits;

  var _useContext = useContext(context),
      errorHandlerGlobal = _useContext.errorHandler,
      classNameGlobal = _useContext.className,
      styleGlobal = _useContext.style,
      globalVariables = _useContext.variables,
      globalFunctions = _useContext.functions,
      globalSimplifiableUnits = _useContext.simplifiableUnits;

  var tree = format(value, unit, {
    variables: _objectSpread2(_objectSpread2({}, globalVariables), localVariables),
    functions: _objectSpread2(_objectSpread2({}, globalFunctions), localFunctions),
    simplifiableUnits: unionArrays$1(localSimplifiableUnits, globalSimplifiableUnits)
  });
  return render(tree, {
    errorHandler: _objectSpread2(_objectSpread2({}, errorHandlerGlobal), errorHandler),
    className: classnames(classNameGlobal, className),
    style: _objectSpread2(_objectSpread2({}, styleGlobal), style)
  });
};

var defaultErrorHandler$1 = {
  // Parser errors
  numberWhitespace: function numberWhitespace() {
    return 'Cannot have spaces inside numbers';
  },
  invalidNumber: function invalidNumber() {
    return 'Invalid number';
  },
  adjecentOperator: function adjecentOperator() {
    return 'Two operators cannot be adjecent';
  },
  invalidChar: function invalidChar(_ref) {
    var character = _ref.character;
    return "Invalid character '".concat(character, "'");
  },
  invalidUnary: function invalidUnary(_ref2) {
    var symbol = _ref2.symbol;
    return "'".concat(symbol, "' cannot be a unary operator");
  },
  multipleExpressions: function multipleExpressions() {
    return 'An unexpected parsing error occured';
  },
  matrixMixedDimension: function matrixMixedDimension(_ref3) {
    var lengthExpected = _ref3.lengthExpected,
        lengthReceived = _ref3.lengthReceived;
    return "Matrix-row has length ".concat(lengthReceived, ", but should be ").concat(lengthExpected);
  },
  matrixEmpty: function matrixEmpty() {
    return 'Matrix must contain at least one expression';
  },
  vectorEmpty: function vectorEmpty() {
    return 'Vector must contain at least one expression';
  },
  expectedEnd: function expectedEnd() {
    return 'Expected end of equation';
  },
  expectedSquareBracket: function expectedSquareBracket() {
    return 'Missing closing square bracket';
  },
  expectedCloseParens: function expectedCloseParens() {
    return 'Missing closing parenthesis';
  },
  operatorLast: function operatorLast() {
    return 'Equation cannot end on an operator';
  },
  // Resolver errors
  functionUnknown: function functionUnknown(_ref4) {
    var name = _ref4.name;
    return "Unknown function ".concat(name);
  },
  functionArgLength: function functionArgLength(_ref5) {
    var name = _ref5.name,
        minArgs = _ref5.minArgs,
        maxArgs = _ref5.maxArgs;
    return minArgs === maxArgs ? "".concat(name, " must have ").concat(minArgs, " arguments") : "".concat(name, " must have ").concat(minArgs, "-").concat(maxArgs, " arguments");
  },
  functionNumberOnly: function functionNumberOnly(_ref6) {
    var name = _ref6.name;
    return "Arguments of ".concat(name, " must be unitless numbers");
  },
  functionSqrt1Positive: function functionSqrt1Positive(_ref7) {
    var name = _ref7.name;
    return "First argument of ".concat(name, " must be positive");
  },
  functionRoot1PositiveInteger: function functionRoot1PositiveInteger(_ref8) {
    var name = _ref8.name;
    return "First argument of ".concat(name, " must be a positive integer");
  },
  functionRoot2Positive: function functionRoot2Positive(_ref9) {
    var name = _ref9.name;
    return "Second argument of ".concat(name, " must be positive");
  },
  functionSum1Variable: function functionSum1Variable(_ref10) {
    var name = _ref10.name,
        variableType = _ref10.variableType;
    return "First argument of ".concat(name, " must be a variable, was ").concat(variableType);
  },
  functionSum2Integer: function functionSum2Integer(_ref11) {
    var name = _ref11.name;
    return "Second argument of ".concat(name, " must be an integer");
  },
  functionSum3Integer: function functionSum3Integer(_ref12) {
    var name = _ref12.name;
    return "Third argument of ".concat(name, " must be an integer");
  },
  variableUnknown: function variableUnknown(_ref13) {
    var name = _ref13.name;
    return "Unknown variable ".concat(name);
  },
  plusDifferentUnits: function plusDifferentUnits() {
    return "Cannot add numbers with different units";
  },
  plusMatrixMismatch: function plusMatrixMismatch(_ref14) {
    var aDimensions = _ref14.aDimensions,
        bDimensions = _ref14.bDimensions;
    return "Cannot add matrices of dimensions ".concat(aDimensions, " and ").concat(bDimensions);
  },
  plusminusUnhandled: function plusminusUnhandled() {
    return "Plus-minus operator is currently not supported";
  },
  scalarProductUnbalanced: function scalarProductUnbalanced(_ref15) {
    var aLength = _ref15.aLength,
        bLength = _ref15.bLength;
    return "Cannot calculate scalar (dot) product of vectors of size ".concat(aLength, " and ").concat(bLength);
  },
  vectorProduct3VectorOnly: function vectorProduct3VectorOnly() {
    return "Vector (cross) product requires 2 3-vectors";
  },
  matrixProductMatrixMismatch: function matrixProductMatrixMismatch(_ref16) {
    var aDimensions = _ref16.aDimensions,
        bDimensions = _ref16.bDimensions;
    return "Cannot multiply matrices of dimensions ".concat(aDimensions, " and ").concat(bDimensions);
  },
  multiplyImplicitNoVectors: function multiplyImplicitNoVectors() {
    return "Cannot multiply vectors without symbol, use either dot or cross";
  },
  divideNotZero: function divideNotZero() {
    return "Cannot divide by zero";
  },
  divideMatrixMatrix: function divideMatrixMatrix() {
    return "Cannot divide matrices with each other";
  },
  powerUnitlessNumberExponent: function powerUnitlessNumberExponent() {
    return "Exponent must be a unitless number";
  },
  operatorInvalidArguments: function operatorInvalidArguments(_ref17) {
    var operator = _ref17.operator,
        a = _ref17.a,
        b = _ref17.b;
    return "Operator '".concat(operator, "' not defined for ").concat(a, " and ").concat(b);
  },
  noComparison: function noComparison() {
    return "Cannot evaluate a comparison";
  },
  matrixDifferentUnits: function matrixDifferentUnits() {
    return "All matrix-cells must have the same unit";
  },
  matrixNoNesting: function matrixNoNesting() {
    return "Cannot nest matrices";
  },
  invalidEquation: function invalidEquation() {
    return "Cannot resolve an invalid equation";
  },
  placeholder: function placeholder() {
    return "Cannot evaluate a placeholder";
  },
  invalidUnit: function invalidUnit() {
    return "Must be a valid unit";
  }
};

export { Equation, EquationEvaluate, EquationEvaluatePreparsed, EquationOptions, EquationPreparsed, defaultErrorHandler$1 as defaultErrorHandler, render };
