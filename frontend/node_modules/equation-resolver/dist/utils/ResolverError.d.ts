import { ResultResolveError } from '../ResultResolveError';
declare type Error<T extends ResultResolveError['errorType'], TError = ResultResolveError> = TError extends {
    errorType: T;
} ? TError : never;
declare type Values<T extends ResultResolveError['errorType']> = Omit<Error<T>, 'type' | 'errorNode' | 'errorType'>;
export declare class ResolverError<T extends ResultResolveError['errorType']> extends Error {
    type: T;
    errorNode: ResultResolveError['errorNode'];
    values: Values<T>;
    constructor(type: T, errorNode: ResultResolveError['errorNode'], values: Values<T>);
    getResolveError(): Error<T, {
        type: "resolve-error";
        errorNode: import("equation-parser").EquationNodeVariable | import("equation-parser").EquationNodeNumber | {
            type: "positive";
            value: import("equation-parser").EquationNode;
        } | {
            type: "negative";
            value: import("equation-parser").EquationNode;
        } | {
            type: "positive-negative";
            value: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeFunction | import("equation-parser").EquationNodeBlock | {
            type: "plus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "plus-minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-implicit";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-dot";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-cross";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-fraction";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-inline";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "power";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "approximates";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeMatrix | import("equation-parser/dist/EquationNode").EquationNodeOperandPlaceholder | import("equation-parser/dist/EquationNode").EquationNodeFunctionPlaceholder | {
            type: "operator-placeholder";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "operator-unary-placeholder";
            value: import("equation-parser").EquationNode;
        } | null;
    } & {
        errorType: "functionUnknown";
        name: string;
    }> | Error<T, {
        type: "resolve-error";
        errorNode: import("equation-parser").EquationNodeVariable | import("equation-parser").EquationNodeNumber | {
            type: "positive";
            value: import("equation-parser").EquationNode;
        } | {
            type: "negative";
            value: import("equation-parser").EquationNode;
        } | {
            type: "positive-negative";
            value: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeFunction | import("equation-parser").EquationNodeBlock | {
            type: "plus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "plus-minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-implicit";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-dot";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-cross";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-fraction";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-inline";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "power";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "approximates";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeMatrix | import("equation-parser/dist/EquationNode").EquationNodeOperandPlaceholder | import("equation-parser/dist/EquationNode").EquationNodeFunctionPlaceholder | {
            type: "operator-placeholder";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "operator-unary-placeholder";
            value: import("equation-parser").EquationNode;
        } | null;
    } & {
        errorType: "functionArgLength";
        name: string;
        minArgs: number;
        maxArgs: number;
    }> | Error<T, {
        type: "resolve-error";
        errorNode: import("equation-parser").EquationNodeVariable | import("equation-parser").EquationNodeNumber | {
            type: "positive";
            value: import("equation-parser").EquationNode;
        } | {
            type: "negative";
            value: import("equation-parser").EquationNode;
        } | {
            type: "positive-negative";
            value: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeFunction | import("equation-parser").EquationNodeBlock | {
            type: "plus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "plus-minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-implicit";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-dot";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-cross";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-fraction";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-inline";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "power";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "approximates";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeMatrix | import("equation-parser/dist/EquationNode").EquationNodeOperandPlaceholder | import("equation-parser/dist/EquationNode").EquationNodeFunctionPlaceholder | {
            type: "operator-placeholder";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "operator-unary-placeholder";
            value: import("equation-parser").EquationNode;
        } | null;
    } & {
        errorType: "functionNumberOnly";
        name: string;
    }> | Error<T, {
        type: "resolve-error";
        errorNode: import("equation-parser").EquationNodeVariable | import("equation-parser").EquationNodeNumber | {
            type: "positive";
            value: import("equation-parser").EquationNode;
        } | {
            type: "negative";
            value: import("equation-parser").EquationNode;
        } | {
            type: "positive-negative";
            value: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeFunction | import("equation-parser").EquationNodeBlock | {
            type: "plus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "plus-minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-implicit";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-dot";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-cross";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-fraction";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-inline";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "power";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "approximates";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeMatrix | import("equation-parser/dist/EquationNode").EquationNodeOperandPlaceholder | import("equation-parser/dist/EquationNode").EquationNodeFunctionPlaceholder | {
            type: "operator-placeholder";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "operator-unary-placeholder";
            value: import("equation-parser").EquationNode;
        } | null;
    } & {
        errorType: "functionSqrt1Positive";
        name: string;
    }> | Error<T, {
        type: "resolve-error";
        errorNode: import("equation-parser").EquationNodeVariable | import("equation-parser").EquationNodeNumber | {
            type: "positive";
            value: import("equation-parser").EquationNode;
        } | {
            type: "negative";
            value: import("equation-parser").EquationNode;
        } | {
            type: "positive-negative";
            value: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeFunction | import("equation-parser").EquationNodeBlock | {
            type: "plus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "plus-minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-implicit";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-dot";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-cross";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-fraction";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-inline";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "power";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "approximates";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeMatrix | import("equation-parser/dist/EquationNode").EquationNodeOperandPlaceholder | import("equation-parser/dist/EquationNode").EquationNodeFunctionPlaceholder | {
            type: "operator-placeholder";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "operator-unary-placeholder";
            value: import("equation-parser").EquationNode;
        } | null;
    } & {
        errorType: "functionRoot1PositiveInteger";
        name: string;
    }> | Error<T, {
        type: "resolve-error";
        errorNode: import("equation-parser").EquationNodeVariable | import("equation-parser").EquationNodeNumber | {
            type: "positive";
            value: import("equation-parser").EquationNode;
        } | {
            type: "negative";
            value: import("equation-parser").EquationNode;
        } | {
            type: "positive-negative";
            value: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeFunction | import("equation-parser").EquationNodeBlock | {
            type: "plus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "plus-minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-implicit";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-dot";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-cross";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-fraction";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-inline";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "power";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "approximates";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeMatrix | import("equation-parser/dist/EquationNode").EquationNodeOperandPlaceholder | import("equation-parser/dist/EquationNode").EquationNodeFunctionPlaceholder | {
            type: "operator-placeholder";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "operator-unary-placeholder";
            value: import("equation-parser").EquationNode;
        } | null;
    } & {
        errorType: "functionRoot2Positive";
        name: string;
    }> | Error<T, {
        type: "resolve-error";
        errorNode: import("equation-parser").EquationNodeVariable | import("equation-parser").EquationNodeNumber | {
            type: "positive";
            value: import("equation-parser").EquationNode;
        } | {
            type: "negative";
            value: import("equation-parser").EquationNode;
        } | {
            type: "positive-negative";
            value: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeFunction | import("equation-parser").EquationNodeBlock | {
            type: "plus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "plus-minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-implicit";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-dot";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-cross";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-fraction";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-inline";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "power";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "approximates";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeMatrix | import("equation-parser/dist/EquationNode").EquationNodeOperandPlaceholder | import("equation-parser/dist/EquationNode").EquationNodeFunctionPlaceholder | {
            type: "operator-placeholder";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "operator-unary-placeholder";
            value: import("equation-parser").EquationNode;
        } | null;
    } & {
        errorType: "functionSum1Variable";
        name: string;
        variableType: string;
    }> | Error<T, {
        type: "resolve-error";
        errorNode: import("equation-parser").EquationNodeVariable | import("equation-parser").EquationNodeNumber | {
            type: "positive";
            value: import("equation-parser").EquationNode;
        } | {
            type: "negative";
            value: import("equation-parser").EquationNode;
        } | {
            type: "positive-negative";
            value: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeFunction | import("equation-parser").EquationNodeBlock | {
            type: "plus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "plus-minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-implicit";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-dot";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-cross";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-fraction";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-inline";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "power";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "approximates";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeMatrix | import("equation-parser/dist/EquationNode").EquationNodeOperandPlaceholder | import("equation-parser/dist/EquationNode").EquationNodeFunctionPlaceholder | {
            type: "operator-placeholder";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "operator-unary-placeholder";
            value: import("equation-parser").EquationNode;
        } | null;
    } & {
        errorType: "functionSum2Integer";
        name: string;
    }> | Error<T, {
        type: "resolve-error";
        errorNode: import("equation-parser").EquationNodeVariable | import("equation-parser").EquationNodeNumber | {
            type: "positive";
            value: import("equation-parser").EquationNode;
        } | {
            type: "negative";
            value: import("equation-parser").EquationNode;
        } | {
            type: "positive-negative";
            value: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeFunction | import("equation-parser").EquationNodeBlock | {
            type: "plus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "plus-minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-implicit";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-dot";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-cross";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-fraction";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-inline";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "power";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "approximates";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeMatrix | import("equation-parser/dist/EquationNode").EquationNodeOperandPlaceholder | import("equation-parser/dist/EquationNode").EquationNodeFunctionPlaceholder | {
            type: "operator-placeholder";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "operator-unary-placeholder";
            value: import("equation-parser").EquationNode;
        } | null;
    } & {
        errorType: "functionSum3Integer";
        name: string;
    }> | Error<T, {
        type: "resolve-error";
        errorNode: import("equation-parser").EquationNodeVariable | import("equation-parser").EquationNodeNumber | {
            type: "positive";
            value: import("equation-parser").EquationNode;
        } | {
            type: "negative";
            value: import("equation-parser").EquationNode;
        } | {
            type: "positive-negative";
            value: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeFunction | import("equation-parser").EquationNodeBlock | {
            type: "plus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "plus-minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-implicit";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-dot";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-cross";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-fraction";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-inline";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "power";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "approximates";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeMatrix | import("equation-parser/dist/EquationNode").EquationNodeOperandPlaceholder | import("equation-parser/dist/EquationNode").EquationNodeFunctionPlaceholder | {
            type: "operator-placeholder";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "operator-unary-placeholder";
            value: import("equation-parser").EquationNode;
        } | null;
    } & {
        errorType: "variableUnknown";
        name: string;
    }> | Error<T, {
        type: "resolve-error";
        errorNode: import("equation-parser").EquationNodeVariable | import("equation-parser").EquationNodeNumber | {
            type: "positive";
            value: import("equation-parser").EquationNode;
        } | {
            type: "negative";
            value: import("equation-parser").EquationNode;
        } | {
            type: "positive-negative";
            value: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeFunction | import("equation-parser").EquationNodeBlock | {
            type: "plus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "plus-minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-implicit";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-dot";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-cross";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-fraction";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-inline";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "power";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "approximates";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeMatrix | import("equation-parser/dist/EquationNode").EquationNodeOperandPlaceholder | import("equation-parser/dist/EquationNode").EquationNodeFunctionPlaceholder | {
            type: "operator-placeholder";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "operator-unary-placeholder";
            value: import("equation-parser").EquationNode;
        } | null;
    } & {
        errorType: "plusDifferentUnits";
    }> | Error<T, {
        type: "resolve-error";
        errorNode: import("equation-parser").EquationNodeVariable | import("equation-parser").EquationNodeNumber | {
            type: "positive";
            value: import("equation-parser").EquationNode;
        } | {
            type: "negative";
            value: import("equation-parser").EquationNode;
        } | {
            type: "positive-negative";
            value: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeFunction | import("equation-parser").EquationNodeBlock | {
            type: "plus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "plus-minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-implicit";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-dot";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-cross";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-fraction";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-inline";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "power";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "approximates";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeMatrix | import("equation-parser/dist/EquationNode").EquationNodeOperandPlaceholder | import("equation-parser/dist/EquationNode").EquationNodeFunctionPlaceholder | {
            type: "operator-placeholder";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "operator-unary-placeholder";
            value: import("equation-parser").EquationNode;
        } | null;
    } & {
        errorType: "plusMatrixMismatch";
        aDimensions: string;
        bDimensions: string;
    }> | Error<T, {
        type: "resolve-error";
        errorNode: import("equation-parser").EquationNodeVariable | import("equation-parser").EquationNodeNumber | {
            type: "positive";
            value: import("equation-parser").EquationNode;
        } | {
            type: "negative";
            value: import("equation-parser").EquationNode;
        } | {
            type: "positive-negative";
            value: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeFunction | import("equation-parser").EquationNodeBlock | {
            type: "plus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "plus-minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-implicit";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-dot";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-cross";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-fraction";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-inline";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "power";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "approximates";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeMatrix | import("equation-parser/dist/EquationNode").EquationNodeOperandPlaceholder | import("equation-parser/dist/EquationNode").EquationNodeFunctionPlaceholder | {
            type: "operator-placeholder";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "operator-unary-placeholder";
            value: import("equation-parser").EquationNode;
        } | null;
    } & {
        errorType: "plusminusUnhandled";
    }> | Error<T, {
        type: "resolve-error";
        errorNode: import("equation-parser").EquationNodeVariable | import("equation-parser").EquationNodeNumber | {
            type: "positive";
            value: import("equation-parser").EquationNode;
        } | {
            type: "negative";
            value: import("equation-parser").EquationNode;
        } | {
            type: "positive-negative";
            value: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeFunction | import("equation-parser").EquationNodeBlock | {
            type: "plus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "plus-minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-implicit";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-dot";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-cross";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-fraction";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-inline";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "power";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "approximates";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeMatrix | import("equation-parser/dist/EquationNode").EquationNodeOperandPlaceholder | import("equation-parser/dist/EquationNode").EquationNodeFunctionPlaceholder | {
            type: "operator-placeholder";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "operator-unary-placeholder";
            value: import("equation-parser").EquationNode;
        } | null;
    } & {
        errorType: "scalarProductUnbalanced";
        aLength: number;
        bLength: number;
    }> | Error<T, {
        type: "resolve-error";
        errorNode: import("equation-parser").EquationNodeVariable | import("equation-parser").EquationNodeNumber | {
            type: "positive";
            value: import("equation-parser").EquationNode;
        } | {
            type: "negative";
            value: import("equation-parser").EquationNode;
        } | {
            type: "positive-negative";
            value: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeFunction | import("equation-parser").EquationNodeBlock | {
            type: "plus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "plus-minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-implicit";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-dot";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-cross";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-fraction";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-inline";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "power";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "approximates";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeMatrix | import("equation-parser/dist/EquationNode").EquationNodeOperandPlaceholder | import("equation-parser/dist/EquationNode").EquationNodeFunctionPlaceholder | {
            type: "operator-placeholder";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "operator-unary-placeholder";
            value: import("equation-parser").EquationNode;
        } | null;
    } & {
        errorType: "vectorProduct3VectorOnly";
    }> | Error<T, {
        type: "resolve-error";
        errorNode: import("equation-parser").EquationNodeVariable | import("equation-parser").EquationNodeNumber | {
            type: "positive";
            value: import("equation-parser").EquationNode;
        } | {
            type: "negative";
            value: import("equation-parser").EquationNode;
        } | {
            type: "positive-negative";
            value: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeFunction | import("equation-parser").EquationNodeBlock | {
            type: "plus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "plus-minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-implicit";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-dot";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-cross";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-fraction";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-inline";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "power";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "approximates";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeMatrix | import("equation-parser/dist/EquationNode").EquationNodeOperandPlaceholder | import("equation-parser/dist/EquationNode").EquationNodeFunctionPlaceholder | {
            type: "operator-placeholder";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "operator-unary-placeholder";
            value: import("equation-parser").EquationNode;
        } | null;
    } & {
        errorType: "matrixProductMatrixMismatch";
        aDimensions: string;
        bDimensions: string;
    }> | Error<T, {
        type: "resolve-error";
        errorNode: import("equation-parser").EquationNodeVariable | import("equation-parser").EquationNodeNumber | {
            type: "positive";
            value: import("equation-parser").EquationNode;
        } | {
            type: "negative";
            value: import("equation-parser").EquationNode;
        } | {
            type: "positive-negative";
            value: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeFunction | import("equation-parser").EquationNodeBlock | {
            type: "plus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "plus-minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-implicit";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-dot";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-cross";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-fraction";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-inline";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "power";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "approximates";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeMatrix | import("equation-parser/dist/EquationNode").EquationNodeOperandPlaceholder | import("equation-parser/dist/EquationNode").EquationNodeFunctionPlaceholder | {
            type: "operator-placeholder";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "operator-unary-placeholder";
            value: import("equation-parser").EquationNode;
        } | null;
    } & {
        errorType: "multiplyImplicitNoVectors";
    }> | Error<T, {
        type: "resolve-error";
        errorNode: import("equation-parser").EquationNodeVariable | import("equation-parser").EquationNodeNumber | {
            type: "positive";
            value: import("equation-parser").EquationNode;
        } | {
            type: "negative";
            value: import("equation-parser").EquationNode;
        } | {
            type: "positive-negative";
            value: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeFunction | import("equation-parser").EquationNodeBlock | {
            type: "plus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "plus-minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-implicit";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-dot";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-cross";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-fraction";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-inline";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "power";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "approximates";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeMatrix | import("equation-parser/dist/EquationNode").EquationNodeOperandPlaceholder | import("equation-parser/dist/EquationNode").EquationNodeFunctionPlaceholder | {
            type: "operator-placeholder";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "operator-unary-placeholder";
            value: import("equation-parser").EquationNode;
        } | null;
    } & {
        errorType: "divideNotZero";
    }> | Error<T, {
        type: "resolve-error";
        errorNode: import("equation-parser").EquationNodeVariable | import("equation-parser").EquationNodeNumber | {
            type: "positive";
            value: import("equation-parser").EquationNode;
        } | {
            type: "negative";
            value: import("equation-parser").EquationNode;
        } | {
            type: "positive-negative";
            value: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeFunction | import("equation-parser").EquationNodeBlock | {
            type: "plus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "plus-minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-implicit";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-dot";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-cross";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-fraction";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-inline";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "power";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "approximates";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeMatrix | import("equation-parser/dist/EquationNode").EquationNodeOperandPlaceholder | import("equation-parser/dist/EquationNode").EquationNodeFunctionPlaceholder | {
            type: "operator-placeholder";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "operator-unary-placeholder";
            value: import("equation-parser").EquationNode;
        } | null;
    } & {
        errorType: "divideMatrixMatrix";
    }> | Error<T, {
        type: "resolve-error";
        errorNode: import("equation-parser").EquationNodeVariable | import("equation-parser").EquationNodeNumber | {
            type: "positive";
            value: import("equation-parser").EquationNode;
        } | {
            type: "negative";
            value: import("equation-parser").EquationNode;
        } | {
            type: "positive-negative";
            value: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeFunction | import("equation-parser").EquationNodeBlock | {
            type: "plus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "plus-minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-implicit";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-dot";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-cross";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-fraction";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-inline";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "power";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "approximates";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeMatrix | import("equation-parser/dist/EquationNode").EquationNodeOperandPlaceholder | import("equation-parser/dist/EquationNode").EquationNodeFunctionPlaceholder | {
            type: "operator-placeholder";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "operator-unary-placeholder";
            value: import("equation-parser").EquationNode;
        } | null;
    } & {
        errorType: "powerUnitlessNumberExponent";
    }> | Error<T, {
        type: "resolve-error";
        errorNode: import("equation-parser").EquationNodeVariable | import("equation-parser").EquationNodeNumber | {
            type: "positive";
            value: import("equation-parser").EquationNode;
        } | {
            type: "negative";
            value: import("equation-parser").EquationNode;
        } | {
            type: "positive-negative";
            value: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeFunction | import("equation-parser").EquationNodeBlock | {
            type: "plus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "plus-minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-implicit";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-dot";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-cross";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-fraction";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-inline";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "power";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "approximates";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeMatrix | import("equation-parser/dist/EquationNode").EquationNodeOperandPlaceholder | import("equation-parser/dist/EquationNode").EquationNodeFunctionPlaceholder | {
            type: "operator-placeholder";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "operator-unary-placeholder";
            value: import("equation-parser").EquationNode;
        } | null;
    } & {
        errorType: "operatorInvalidArguments";
        operator: string;
        a: "number" | "matrix";
        b: "number" | "matrix";
    }> | Error<T, {
        type: "resolve-error";
        errorNode: import("equation-parser").EquationNodeVariable | import("equation-parser").EquationNodeNumber | {
            type: "positive";
            value: import("equation-parser").EquationNode;
        } | {
            type: "negative";
            value: import("equation-parser").EquationNode;
        } | {
            type: "positive-negative";
            value: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeFunction | import("equation-parser").EquationNodeBlock | {
            type: "plus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "plus-minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-implicit";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-dot";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-cross";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-fraction";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-inline";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "power";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "approximates";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeMatrix | import("equation-parser/dist/EquationNode").EquationNodeOperandPlaceholder | import("equation-parser/dist/EquationNode").EquationNodeFunctionPlaceholder | {
            type: "operator-placeholder";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "operator-unary-placeholder";
            value: import("equation-parser").EquationNode;
        } | null;
    } & {
        errorType: "noComparison";
    }> | Error<T, {
        type: "resolve-error";
        errorNode: import("equation-parser").EquationNodeVariable | import("equation-parser").EquationNodeNumber | {
            type: "positive";
            value: import("equation-parser").EquationNode;
        } | {
            type: "negative";
            value: import("equation-parser").EquationNode;
        } | {
            type: "positive-negative";
            value: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeFunction | import("equation-parser").EquationNodeBlock | {
            type: "plus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "plus-minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-implicit";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-dot";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-cross";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-fraction";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-inline";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "power";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "approximates";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeMatrix | import("equation-parser/dist/EquationNode").EquationNodeOperandPlaceholder | import("equation-parser/dist/EquationNode").EquationNodeFunctionPlaceholder | {
            type: "operator-placeholder";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "operator-unary-placeholder";
            value: import("equation-parser").EquationNode;
        } | null;
    } & {
        errorType: "matrixDifferentUnits";
    }> | Error<T, {
        type: "resolve-error";
        errorNode: import("equation-parser").EquationNodeVariable | import("equation-parser").EquationNodeNumber | {
            type: "positive";
            value: import("equation-parser").EquationNode;
        } | {
            type: "negative";
            value: import("equation-parser").EquationNode;
        } | {
            type: "positive-negative";
            value: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeFunction | import("equation-parser").EquationNodeBlock | {
            type: "plus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "plus-minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-implicit";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-dot";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-cross";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-fraction";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-inline";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "power";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "approximates";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeMatrix | import("equation-parser/dist/EquationNode").EquationNodeOperandPlaceholder | import("equation-parser/dist/EquationNode").EquationNodeFunctionPlaceholder | {
            type: "operator-placeholder";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "operator-unary-placeholder";
            value: import("equation-parser").EquationNode;
        } | null;
    } & {
        errorType: "matrixNoNesting";
    }> | Error<T, {
        type: "resolve-error";
        errorNode: import("equation-parser").EquationNodeVariable | import("equation-parser").EquationNodeNumber | {
            type: "positive";
            value: import("equation-parser").EquationNode;
        } | {
            type: "negative";
            value: import("equation-parser").EquationNode;
        } | {
            type: "positive-negative";
            value: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeFunction | import("equation-parser").EquationNodeBlock | {
            type: "plus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "plus-minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-implicit";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-dot";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-cross";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-fraction";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-inline";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "power";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "approximates";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeMatrix | import("equation-parser/dist/EquationNode").EquationNodeOperandPlaceholder | import("equation-parser/dist/EquationNode").EquationNodeFunctionPlaceholder | {
            type: "operator-placeholder";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "operator-unary-placeholder";
            value: import("equation-parser").EquationNode;
        } | null;
    } & {
        errorType: "invalidEquation";
    }> | Error<T, {
        type: "resolve-error";
        errorNode: import("equation-parser").EquationNodeVariable | import("equation-parser").EquationNodeNumber | {
            type: "positive";
            value: import("equation-parser").EquationNode;
        } | {
            type: "negative";
            value: import("equation-parser").EquationNode;
        } | {
            type: "positive-negative";
            value: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeFunction | import("equation-parser").EquationNodeBlock | {
            type: "plus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "plus-minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-implicit";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-dot";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-cross";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-fraction";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-inline";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "power";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "approximates";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeMatrix | import("equation-parser/dist/EquationNode").EquationNodeOperandPlaceholder | import("equation-parser/dist/EquationNode").EquationNodeFunctionPlaceholder | {
            type: "operator-placeholder";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "operator-unary-placeholder";
            value: import("equation-parser").EquationNode;
        } | null;
    } & {
        errorType: "placeholder";
    }> | Error<T, {
        type: "resolve-error";
        errorNode: import("equation-parser").EquationNodeVariable | import("equation-parser").EquationNodeNumber | {
            type: "positive";
            value: import("equation-parser").EquationNode;
        } | {
            type: "negative";
            value: import("equation-parser").EquationNode;
        } | {
            type: "positive-negative";
            value: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeFunction | import("equation-parser").EquationNodeBlock | {
            type: "plus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "plus-minus";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-implicit";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-dot";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "multiply-cross";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-fraction";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "divide-inline";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "power";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "less-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "greater-than-equals";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "approximates";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | import("equation-parser").EquationNodeMatrix | import("equation-parser/dist/EquationNode").EquationNodeOperandPlaceholder | import("equation-parser/dist/EquationNode").EquationNodeFunctionPlaceholder | {
            type: "operator-placeholder";
            a: import("equation-parser").EquationNode;
            b: import("equation-parser").EquationNode;
        } | {
            type: "operator-unary-placeholder";
            value: import("equation-parser").EquationNode;
        } | null;
    } & {
        errorType: "invalidUnit";
    }>;
}
export {};
